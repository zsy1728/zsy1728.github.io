<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>java反射详解 [未完成]</title>
    <link href="/2023/03/29/java%E5%8F%8D%E5%B0%84/"/>
    <url>/2023/03/29/java%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<p>j</p><p>Java反射</p><p>创建对象：</p><p>Class.forName();</p><p>getConstructors;</p><p>newInstance</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot事务传播机制</title>
    <link href="/2023/03/08/Spring%E4%BA%8B%E5%8A%A1/"/>
    <url>/2023/03/08/Spring%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="事务传播机制"><a href="#事务传播机制" class="headerlink" title="事务传播机制"></a>事务传播机制</h1><ul><li>PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。这是默认值。</li><li>PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li><li>PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li><li>PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li><li>PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</li><li>PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li><li>PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li></ul><h1 id="注解失效场景"><a href="#注解失效场景" class="headerlink" title="注解失效场景"></a>注解失效场景</h1><ul><li><p>Spring的AOP，声明式事务，@Transactional 注解 是针对RuntimeException回滚 当然可以指定异常的类型</p></li><li><p><strong>@Transactional注解的方法中，再调用本类中的其他的带有@Transactional注解方法时，那么被调用的方法上的@Transactional注解是不会生效的！！</strong>（因为动态代理）</p></li><li><p><strong>方法必须是public修饰符。否则注解不会生效</strong></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>后端工具框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打开应用时gradle下载慢</title>
    <link href="/2023/01/15/gradle/"/>
    <url>/2023/01/15/gradle/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-sutdio第一次打开一个工程巨慢怎么办？"><a href="#Android-sutdio第一次打开一个工程巨慢怎么办？" class="headerlink" title="Android sutdio第一次打开一个工程巨慢怎么办？"></a>Android sutdio第一次打开一个工程巨慢怎么办？</h1><p>Android Studio一个项目所用的Gradle是由我们的工程中下面这个文件决定的:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&#123;your project&#125;/gradle/<span class="hljs-keyword">wrapper</span>/gradle-<span class="hljs-keyword">wrapper</span>.properties<br></code></pre></td></tr></table></figure><p>文件内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">distributionBase</span>=<span class="hljs-string">GRADLE_USER_HOME</span><br><span class="hljs-attr">distributionPath</span>=<span class="hljs-string">wrapper/dists</span><br><span class="hljs-attr">zipStoreBase</span>=<span class="hljs-string">GRADLE_USER_HOME</span><br><span class="hljs-attr">zipStorePath</span>=<span class="hljs-string">wrapper/dists</span><br><span class="hljs-attr">distributionUrl</span>=<span class="hljs-string">https\://services.gradle.org/distributions/gradle-2.4-all.zip</span><br></code></pre></td></tr></table></figure><p>其中GRADLE_USER_HOME可以在studio里面设置，系统环境变量也可以。</p><p>Android Studio打开一个工程时，首先会读取<code>gradle-wrapper.properties</code> 文件，从而知道这个工程需要哪个版本的gradle ,然后就会去保存gradle的文件夹<code>GRADLE_USER_HOME</code> 去找看存不存在这个版本的gradle，不存在则会去<code>distributionUrl</code> 去下载 。</p><p>为什么我明明下载了gradle，也指定了gradle的存放目录，可打开的时候还是会去自动下载gradle了，那是因为你没有配对地方。现在回过来看项目配置文件是不是<code>gradle/wrapper/gradle-wrapper.properties</code> 是不是恍然大悟？</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">Gradle下载地址：https:<span class="hljs-regexp">//</span>services.gradle.org<span class="hljs-regexp">/distributions/</span><br></code></pre></td></tr></table></figure><p><img src="/img/20160602175350971.png"></p><ul><li><p>下载对应版本的gradle，复制到上图中一串乱码的文件夹下，注意不要解压。这样我们就跳过了下载gradle这一步。</p></li><li><p>重新开启Android Studio打开工程</p></li></ul><p>参考：<a href="https://blog.csdn.net/u010142437/article/details/109119501">https://blog.csdn.net/u010142437/article/details/109119501</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaIO [未完成]</title>
    <link href="/2023/01/12/javaIO/"/>
    <url>/2023/01/12/javaIO/</url>
    
    <content type="html"><![CDATA[<p>虽然java IO类库庞大，但总体来说其框架还是很清楚的。从是读媒介还是写媒介的维度看，Java IO可以分为：</p><table><thead><tr><th>-</th><th>字节流</th><th>字符流</th></tr></thead><tbody><tr><td>输入流</td><td>InputStream</td><td>Reader</td></tr><tr><td>输出流</td><td>OutputStream</td><td>Writer</td></tr></tbody></table><p><img src="/img/20150910154516952.png"></p><p>各类用途汇总如下：</p><ul><li>文件访问</li><li>网络访问</li><li>内存缓存访问</li><li>线程内部通信(管道)</li><li>缓冲</li><li>过滤</li><li>解析</li><li>读写文本 (Readers &#x2F; Writers)</li><li>读写基本类型数据 (long, int etc.)</li><li>读写对象</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot启动慢怎么破 [未完成]</title>
    <link href="/2022/12/24/springboot%E5%90%AF%E5%8A%A8%E6%85%A2/"/>
    <url>/2022/12/24/springboot%E5%90%AF%E5%8A%A8%E6%85%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot启动流程"><a href="#Spring-Boot启动流程" class="headerlink" title="Spring Boot启动流程"></a>Spring Boot启动流程</h1><h2 id="1-Spring-Boot-启动流程图"><a href="#1-Spring-Boot-启动流程图" class="headerlink" title="1 Spring Boot 启动流程图"></a>1 Spring Boot 启动流程图</h2><p><img src="/img/spring/1525c51fbf634f86a03e92ae4f266c4d.png"></p><h2 id="2-SpringApplication-构造方法"><a href="#2-SpringApplication-构造方法" class="headerlink" title="2 SpringApplication 构造方法"></a>2 SpringApplication 构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">SpringApplication</span><span class="hljs-params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> &#123;<br><span class="hljs-comment">// 初始化资源加载器，默认为null</span><br><span class="hljs-built_in">this</span>.resourceLoader = resourceLoader;<br><span class="hljs-comment">// 断言主要加载资源类不能为空</span><br>Assert.notNull(primarySources, <span class="hljs-string">&quot;PrimarySources must not be null&quot;</span>);<br><span class="hljs-comment">// 初始化主要资源加载类集合并去重</span><br><span class="hljs-built_in">this</span>.primarySources = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;(Arrays.asList(primarySources));<br><span class="hljs-comment">// 得到当前WEB应用类型</span><br><span class="hljs-built_in">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();<br><span class="hljs-comment">// 设置应用上下文初始化器并去重</span><br>setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));<br><span class="hljs-comment">// 设置监听器并去重</span><br>setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));<br><span class="hljs-comment">// 得到主应用程序启动类</span><br><span class="hljs-built_in">this</span>.mainApplicationClass = deduceMainApplicationClass();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-1-primarySources"><a href="#2-1-primarySources" class="headerlink" title="2.1 primarySources"></a>2.1 primarySources</h3><p> 启动类的Class文件，携带着包的ClassLoader</p><h3 id="2-2-得到web应用类型"><a href="#2-2-得到web应用类型" class="headerlink" title="2.2 得到web应用类型"></a>2.2 得到web应用类型</h3><p>一共有三种类型：NONE、SERVLET、REACTIVE</p><h3 id="2-3-加载Spring应用上下文初始化器-setInitializers"><a href="#2-3-加载Spring应用上下文初始化器-setInitializers" class="headerlink" title="2.3 加载Spring应用上下文初始化器 setInitializers"></a>2.3 加载Spring应用上下文初始化器 setInitializers</h3><p>从”META-INF&#x2F;spring.factories”文件读取key为ApplicationContextInitializer的实例名称集合并去重</p><h3 id="2-4-设置监听器"><a href="#2-4-设置监听器" class="headerlink" title="2.4 设置监听器"></a>2.4 设置监听器</h3><p>从”META-INF&#x2F;spring.factories”文件读取key为ApplicationListener的实例名称集合并去重</p><h3 id="2-5-得到程序主启动类"><a href="#2-5-得到程序主启动类" class="headerlink" title="2.5 得到程序主启动类"></a>2.5 得到程序主启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">this</span>.mainApplicationClass = deduceMainApplicationClass();<br><span class="hljs-keyword">private</span> Class&lt;?&gt; deduceMainApplicationClass() &#123;<br>StackTraceElement[] stackTrace = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>().getStackTrace();<br>    <span class="hljs-keyword">for</span> (StackTraceElement stackTraceElement : stackTrace) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;main&quot;</span>.equals(stackTraceElement.getMethodName())) &#123;<br>    <span class="hljs-keyword">return</span> Class.forName(stackTraceElement.getClassName());<br>    &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 竟然这样。。。</span><br></code></pre></td></tr></table></figure><h2 id="2-SpringApplication-run方法"><a href="#2-SpringApplication-run方法" class="headerlink" title="2 SpringApplication run方法"></a>2 SpringApplication run方法</h2><p>Spring Boot启动速度慢有很多原因，可能是项目中使用的无用配置太多，自动配置，项目太过庞大、复杂等，maven中是否无用的依赖太多，其实大部分的启动时间是由于 Spring 需要加载各种 Bean 导致启动速度下降的。</p><p><strong>所以我们现在讨论如何用 BeanPostProcessor 统计 Bean 的初始化时间。</strong></p><p><img src="/img/spring/1350888580_1225.jpg" alt="bean生命周期"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServiceInjectProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ConcurrentHashMap&lt;String, Long&gt; START_TIHE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>(); <br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        START_TIME.put(beanName, System.currentTimeMillis( ));<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-keyword">if</span> (Objects.notNull(START_TIME.get(beanName))) &#123;<br>            <span class="hljs-comment">// print something</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端工具框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux伙伴系统分配内存流程</title>
    <link href="/2022/12/18/linux/"/>
    <url>/2022/12/18/linux/</url>
    
    <content type="html"><![CDATA[<p>Linux伙伴系统主要分配流程为</p><p>正常非配(或叫快速分配)流程：</p><p>1，如果分配的是单个页面，考虑从per CPU缓存中分配空间，如果缓存中没有页面，从伙伴系统中提取页面做补充。</p><p>2，分配多个页面时，从指定类型中分配，如果指定类型中没有足够的页面，从备用类型链表中分配。最后会试探保留类型链表。</p><p>慢速(允许等待和页面回收)分配：</p><p>3，当上面两种分配方案都不能满足要求时，考虑页面回收、杀死进程等操作后在试。</p><p><img src="/img/linux_buddy.png" alt="linux_buddy"></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JDK：CharacterData和CharacterDataLatin1</title>
    <link href="/2022/11/30/jdk-Character/"/>
    <url>/2022/11/30/jdk-Character/</url>
    
    <content type="html"><![CDATA[<p>今天在使用一个字符转大写的函数，toUpperCase() ，追踪源码时发现颇为复杂，上网搜了文章，转载了这篇博客过来</p><p>转载自：<a href="https://blog.51cto.com/f1yinsky/2394164">https://blog.51cto.com/f1yinsky/2394164</a></p><hr><p>CharacterData类是一个抽象类，这个抽象类中定义了许多判断字符属性的抽象方法，这些方法的具体实现都在Character0X类中。其实Character类中有许多对应的方法，CharacterData子类实现抽象类的方法来实现字符属性的判断。我们并不关心这个字符由哪个具体类中的方法来判断，如果以后还增加了一些增补字符，那么只需要实现抽象类并且稍加修改of()方法即可。这就是使用策略模式的好处。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CharacterData</span> &#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getProperties</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getType</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isWhitespace</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isMirrored</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isJavaIdentifierStart</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isJavaIdentifierPart</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isUnicodeIdentifierStart</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isUnicodeIdentifierPart</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isIdentifierIgnorable</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">toLowerCase</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">toUpperCase</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">toTitleCase</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">digit</span><span class="hljs-params">(<span class="hljs-type">int</span> ch, <span class="hljs-type">int</span> radix)</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNumericValue</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-type">byte</span> <span class="hljs-title function_">getDirectionality</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span>;<br><br>    <span class="hljs-comment">//need to implement for JSR204</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">toUpperCaseEx</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-keyword">return</span> toUpperCase(ch);<br>    &#125;<br><br>    <span class="hljs-type">char</span>[] toUpperCaseCharArray(<span class="hljs-type">int</span> ch) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isOtherLowercase</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isOtherUppercase</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isOtherAlphabetic</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isIdeographic</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Character &lt;= 0xff (basic latin) is handled by internal fast-path</span><br>    <span class="hljs-comment">// to avoid initializing large tables.</span><br>    <span class="hljs-comment">// Note: performance of this &quot;fast-path&quot; code may be sub-optimal</span><br>    <span class="hljs-comment">// in negative cases for some accessors due to complicated ranges.</span><br>    <span class="hljs-comment">// Should revisit after optimization of table initialization.</span><br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> CharacterData <span class="hljs-title function_">of</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-keyword">if</span> (ch &gt;&gt;&gt; <span class="hljs-number">8</span> == <span class="hljs-number">0</span>) &#123;     <span class="hljs-comment">// fast-path</span><br>            <span class="hljs-keyword">return</span> CharacterDataLatin1.instance;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">switch</span>(ch &gt;&gt;&gt; <span class="hljs-number">16</span>) &#123;  <span class="hljs-comment">//plane 00-16</span><br>            <span class="hljs-keyword">case</span>(<span class="hljs-number">0</span>):<br>                <span class="hljs-keyword">return</span> CharacterData00.instance;<br>            <span class="hljs-keyword">case</span>(<span class="hljs-number">1</span>):<br>                <span class="hljs-keyword">return</span> CharacterData01.instance;<br>            <span class="hljs-keyword">case</span>(<span class="hljs-number">2</span>):<br>                <span class="hljs-keyword">return</span> CharacterData02.instance;<br>            <span class="hljs-keyword">case</span>(<span class="hljs-number">14</span>):<br>                <span class="hljs-keyword">return</span> CharacterData0E.instance;<br>            <span class="hljs-keyword">case</span>(<span class="hljs-number">15</span>):   <span class="hljs-comment">// Private Use</span><br>            <span class="hljs-keyword">case</span>(<span class="hljs-number">16</span>):   <span class="hljs-comment">// Private Use</span><br>                <span class="hljs-keyword">return</span> CharacterDataPrivateUse.instance;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">return</span> CharacterDataUndefined.instance;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/img/jdk/20221130235433.png"></p><p>那么Java是怎么判断这些字符的属性的呢？其实每一个Java字符都用一个32位，也就是4个字节来表示这个属性。</p><p>举例说明：<br>当我们传入一个’0’字符时，实际上通过static final CharacterData of(int ch)，’0’对应ASCII码为48，方法判断后，最终会调用CharacterDataLatin1类中对应的方法去处理。</p><p>CharacterDataLatin1源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang;<br><br><span class="hljs-comment">/** The CharacterData class encapsulates the large tables found in</span><br><span class="hljs-comment">    Java.lang.Character. */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CharacterDataLatin1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CharacterData</span> &#123;<br><br>    <span class="hljs-comment">/* The character properties are currently encoded into 32 bits in the following manner:</span><br><span class="hljs-comment">        1 bit   mirrored property</span><br><span class="hljs-comment">        4 bits  directionality property</span><br><span class="hljs-comment">        9 bits  signed offset used for converting case</span><br><span class="hljs-comment">        1 bit   if 1, adding the signed offset converts the character to lowercase</span><br><span class="hljs-comment">        1 bit   if 1, subtracting the signed offset converts the character to uppercase</span><br><span class="hljs-comment">        1 bit   if 1, this character has a titlecase equivalent (possibly itself)</span><br><span class="hljs-comment">        3 bits  0  may not be part of an identifier</span><br><span class="hljs-comment">                1  ignorable control; may continue a Unicode identifier or Java identifier</span><br><span class="hljs-comment">                2  may continue a Java identifier but not a Unicode identifier (unused)</span><br><span class="hljs-comment">                3  may continue a Unicode identifier or Java identifier</span><br><span class="hljs-comment">                4  is a Java whitespace character</span><br><span class="hljs-comment">                5  may start or continue a Java identifier;</span><br><span class="hljs-comment">                   may continue but not start a Unicode identifier (underscores)</span><br><span class="hljs-comment">                6  may start or continue a Java identifier but not a Unicode identifier ($)</span><br><span class="hljs-comment">                7  may start or continue a Unicode identifier or Java identifier</span><br><span class="hljs-comment">                Thus:</span><br><span class="hljs-comment">                   5, 6, 7 may start a Java identifier</span><br><span class="hljs-comment">                   1, 2, 3, 5, 6, 7 may continue a Java identifier</span><br><span class="hljs-comment">                   7 may start a Unicode identifier</span><br><span class="hljs-comment">                   1, 3, 5, 7 may continue a Unicode identifier</span><br><span class="hljs-comment">                   1 is ignorable within an identifier</span><br><span class="hljs-comment">                   4 is Java whitespace</span><br><span class="hljs-comment">        2 bits  0  this character has no numeric property</span><br><span class="hljs-comment">                1  adding the digit offset to the character code and then</span><br><span class="hljs-comment">                   masking with 0x1F will produce the desired numeric value</span><br><span class="hljs-comment">                2  this character has a &quot;strange&quot; numeric value</span><br><span class="hljs-comment">                3  a Java supradecimal digit: adding the digit offset to the</span><br><span class="hljs-comment">                   character code, then masking with 0x1F, then adding 10</span><br><span class="hljs-comment">                   will produce the desired numeric value</span><br><span class="hljs-comment">        5 bits  digit offset</span><br><span class="hljs-comment">        5 bits  character type</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        The encoding of character properties is subject to change at any time.</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">getProperties</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> (<span class="hljs-type">char</span>)ch;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> A[offset];<br>        <span class="hljs-keyword">return</span> props;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">getPropertiesEx</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> (<span class="hljs-type">char</span>)ch;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> B[offset];<br>        <span class="hljs-keyword">return</span> props;<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isOtherLowercase</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> getPropertiesEx(ch);<br>        <span class="hljs-keyword">return</span> (props &amp; <span class="hljs-number">0x0001</span>) != <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isOtherUppercase</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> getPropertiesEx(ch);<br>        <span class="hljs-keyword">return</span> (props &amp; <span class="hljs-number">0x0002</span>) != <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isOtherAlphabetic</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> getPropertiesEx(ch);<br>        <span class="hljs-keyword">return</span> (props &amp; <span class="hljs-number">0x0004</span>) != <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isIdeographic</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> getPropertiesEx(ch);<br>        <span class="hljs-keyword">return</span> (props &amp; <span class="hljs-number">0x0010</span>) != <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">getType</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> getProperties(ch);<br>        <span class="hljs-keyword">return</span> (props &amp; <span class="hljs-number">0x1F</span>);<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isJavaIdentifierStart</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> getProperties(ch);<br>        <span class="hljs-keyword">return</span> ((props &amp; <span class="hljs-number">0x00007000</span>) &gt;= <span class="hljs-number">0x00005000</span>);<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isJavaIdentifierPart</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> getProperties(ch);<br>        <span class="hljs-keyword">return</span> ((props &amp; <span class="hljs-number">0x00003000</span>) != <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isUnicodeIdentifierStart</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> getProperties(ch);<br>        <span class="hljs-keyword">return</span> ((props &amp; <span class="hljs-number">0x00007000</span>) == <span class="hljs-number">0x00007000</span>);<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isUnicodeIdentifierPart</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> getProperties(ch);<br>        <span class="hljs-keyword">return</span> ((props &amp; <span class="hljs-number">0x00001000</span>) != <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isIdentifierIgnorable</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> getProperties(ch);<br>        <span class="hljs-keyword">return</span> ((props &amp; <span class="hljs-number">0x00007000</span>) == <span class="hljs-number">0x00001000</span>);<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">toLowerCase</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mapChar</span> <span class="hljs-operator">=</span> ch;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> getProperties(ch);<br><br>        <span class="hljs-keyword">if</span> (((val &amp; <span class="hljs-number">0x00020000</span>) != <span class="hljs-number">0</span>) &amp;&amp; <br>                ((val &amp; <span class="hljs-number">0x07FC0000</span>) != <span class="hljs-number">0x07FC0000</span>)) &#123; <br>            <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> val &lt;&lt; <span class="hljs-number">5</span> &gt;&gt; (<span class="hljs-number">5</span>+<span class="hljs-number">18</span>);<br>            mapChar = ch + offset;<br>        &#125;<br>        <span class="hljs-keyword">return</span> mapChar;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">toUpperCase</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mapChar</span> <span class="hljs-operator">=</span> ch;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> getProperties(ch);<br><br>        <span class="hljs-keyword">if</span> ((val &amp; <span class="hljs-number">0x00010000</span>) != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> ((val &amp; <span class="hljs-number">0x07FC0000</span>) != <span class="hljs-number">0x07FC0000</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> val  &lt;&lt; <span class="hljs-number">5</span> &gt;&gt; (<span class="hljs-number">5</span>+<span class="hljs-number">18</span>);<br>                mapChar =  ch - offset;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch == <span class="hljs-number">0x00B5</span>) &#123;<br>                mapChar = <span class="hljs-number">0x039C</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> mapChar;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">toTitleCase</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-keyword">return</span> toUpperCase(ch);<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">digit</span><span class="hljs-params">(<span class="hljs-type">int</span> ch, <span class="hljs-type">int</span> radix)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (radix &gt;= Character.MIN_RADIX &amp;&amp; radix &lt;= Character.MAX_RADIX) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> getProperties(ch);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">kind</span> <span class="hljs-operator">=</span> val &amp; <span class="hljs-number">0x1F</span>;<br>            <span class="hljs-keyword">if</span> (kind == Character.DECIMAL_DIGIT_NUMBER) &#123;<br>                value = ch + ((val &amp; <span class="hljs-number">0x3E0</span>) &gt;&gt; <span class="hljs-number">5</span>) &amp; <span class="hljs-number">0x1F</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((val &amp; <span class="hljs-number">0xC00</span>) == <span class="hljs-number">0x00000C00</span>) &#123;<br>                <span class="hljs-comment">// Java supradecimal digit</span><br>                value = (ch + ((val &amp; <span class="hljs-number">0x3E0</span>) &gt;&gt; <span class="hljs-number">5</span>) &amp; <span class="hljs-number">0x1F</span>) + <span class="hljs-number">10</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> (value &lt; radix) ? value : -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">getNumericValue</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> getProperties(ch);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">retval</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">switch</span> (val &amp; <span class="hljs-number">0xC00</span>) &#123;<br>            <span class="hljs-keyword">default</span>: <span class="hljs-comment">// cannot occur</span><br>            <span class="hljs-keyword">case</span> (<span class="hljs-number">0x00000000</span>):         <span class="hljs-comment">// not numeric</span><br>                retval = -<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> (<span class="hljs-number">0x00000400</span>):              <span class="hljs-comment">// simple numeric</span><br>                retval = ch + ((val &amp; <span class="hljs-number">0x3E0</span>) &gt;&gt; <span class="hljs-number">5</span>) &amp; <span class="hljs-number">0x1F</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> (<span class="hljs-number">0x00000800</span>)      :       <span class="hljs-comment">// &quot;strange&quot; numeric</span><br>                 retval = -<span class="hljs-number">2</span>; <br>                 <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> (<span class="hljs-number">0x00000C00</span>):           <span class="hljs-comment">// Java supradecimal</span><br>                retval = (ch + ((val &amp; <span class="hljs-number">0x3E0</span>) &gt;&gt; <span class="hljs-number">5</span>) &amp; <span class="hljs-number">0x1F</span>) + <span class="hljs-number">10</span>;<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> retval;<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isWhitespace</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> getProperties(ch);<br>        <span class="hljs-keyword">return</span> ((props &amp; <span class="hljs-number">0x00007000</span>) == <span class="hljs-number">0x00004000</span>);<br>    &#125;<br><br>    <span class="hljs-type">byte</span> <span class="hljs-title function_">getDirectionality</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> getProperties(ch);<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">directionality</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>)((val &amp; <span class="hljs-number">0x78000000</span>) &gt;&gt; <span class="hljs-number">27</span>);<br><br>        <span class="hljs-keyword">if</span> (directionality == <span class="hljs-number">0xF</span> ) &#123;<br>            directionality = -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> directionality;<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isMirrored</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> getProperties(ch);<br>        <span class="hljs-keyword">return</span> ((props &amp; <span class="hljs-number">0x80000000</span>) != <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">toUpperCaseEx</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mapChar</span> <span class="hljs-operator">=</span> ch;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> getProperties(ch);<br><br>        <span class="hljs-keyword">if</span> ((val &amp; <span class="hljs-number">0x00010000</span>) != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> ((val &amp; <span class="hljs-number">0x07FC0000</span>) != <span class="hljs-number">0x07FC0000</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> val  &lt;&lt; <span class="hljs-number">5</span> &gt;&gt; (<span class="hljs-number">5</span>+<span class="hljs-number">18</span>);<br>                mapChar =  ch - offset;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">switch</span>(ch) &#123;<br>                    <span class="hljs-comment">// map overflow characters</span><br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">0x00B5</span> : mapChar = <span class="hljs-number">0x039C</span>; <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">default</span>       : mapChar = Character.ERROR; <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> mapChar;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">char</span>[] sharpsMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[] &#123;<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>&#125;;<br><br>    <span class="hljs-type">char</span>[] toUpperCaseCharArray(<span class="hljs-type">int</span> ch) &#123;<br>        <span class="hljs-type">char</span>[] upperMap = &#123;(<span class="hljs-type">char</span>)ch&#125;;<br>        <span class="hljs-keyword">if</span> (ch == <span class="hljs-number">0x00DF</span>) &#123;<br>            upperMap = sharpsMap;<br>        &#125;<br>        <span class="hljs-keyword">return</span> upperMap;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">CharacterDataLatin1</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharacterDataLatin1</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">CharacterDataLatin1</span><span class="hljs-params">()</span> &#123;&#125;;<br><br>    <span class="hljs-comment">// The following tables and code generated using:</span><br>  <span class="hljs-comment">// java GenerateCharacter -template c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u144/9417/jdk/make/data/characterdata/CharacterDataLatin1.java.template -spec c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u144/9417/jdk/make/data/unicodedata/UnicodeData.txt -specialcasing c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u144/9417/jdk/make/data/unicodedata/SpecialCasing.txt -proplist c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u144/9417/jdk/make/data/unicodedata/PropList.txt -o c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u144/9417/build/windows-amd64/jdk/gensrc/java/lang/CharacterDataLatin1.java -string -usecharforbyte -latin1 8</span><br>  <span class="hljs-comment">// The A table has 256 entries for a total of 1024 bytes.</span><br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> A[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">256</span>];<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">A_DATA</span> <span class="hljs-operator">=</span><br>    <span class="hljs-string">&quot;\u4800\u100F\u4800\u100F\u4800\u100F\u4800\u100F\u4800\u100F\u4800\u100F\u4800&quot;</span>+<br>    <span class="hljs-string">&quot;\u100F\u4800\u100F\u4800\u100F\u5800\u400F\u5000\u400F\u5800\u400F\u6000\u400F&quot;</span>+<br>    <span class="hljs-string">&quot;\u5000\u400F\u4800\u100F\u4800\u100F\u4800\u100F\u4800\u100F\u4800\u100F\u4800&quot;</span>+<br>    <span class="hljs-string">&quot;\u100F\u4800\u100F\u4800\u100F\u4800\u100F\u4800\u100F\u4800\u100F\u4800\u100F&quot;</span>+<br>    <span class="hljs-string">&quot;\u4800\u100F\u4800\u100F\u5000\u400F\u5000\u400F\u5000\u400F\u5800\u400F\u6000&quot;</span>+<br>    <span class="hljs-string">&quot;\u400C\u6800\030\u6800\030\u2800\030\u2800\u601A\u2800\030\u6800\030\u6800&quot;</span>+<br>    <span class="hljs-string">&quot;\030\uE800\025\uE800\026\u6800\030\u2000\031\u3800\030\u2000\024\u3800\030&quot;</span>+<br>    <span class="hljs-string">&quot;\u3800\030\u1800\u3609\u1800\u3609\u1800\u3609\u1800\u3609\u1800\u3609\u1800&quot;</span>+<br>    <span class="hljs-string">&quot;\u3609\u1800\u3609\u1800\u3609\u1800\u3609\u1800\u3609\u3800\030\u6800\030&quot;</span>+<br>    <span class="hljs-string">&quot;\uE800\031\u6800\031\uE800\031\u6800\030\u6800\030\202\u7FE1\202\u7FE1\202&quot;</span>+<br>    <span class="hljs-string">&quot;\u7FE1\202\u7FE1\202\u7FE1\202\u7FE1\202\u7FE1\202\u7FE1\202\u7FE1\202\u7FE1&quot;</span>+<br>    <span class="hljs-string">&quot;\202\u7FE1\202\u7FE1\202\u7FE1\202\u7FE1\202\u7FE1\202\u7FE1\202\u7FE1\202&quot;</span>+<br>    <span class="hljs-string">&quot;\u7FE1\202\u7FE1\202\u7FE1\202\u7FE1\202\u7FE1\202\u7FE1\202\u7FE1\202\u7FE1&quot;</span>+<br>    <span class="hljs-string">&quot;\202\u7FE1\uE800\025\u6800\030\uE800\026\u6800\033\u6800\u5017\u6800\033\201&quot;</span>+<br>    <span class="hljs-string">&quot;\u7FE2\201\u7FE2\201\u7FE2\201\u7FE2\201\u7FE2\201\u7FE2\201\u7FE2\201\u7FE2&quot;</span>+<br>    <span class="hljs-string">&quot;\201\u7FE2\201\u7FE2\201\u7FE2\201\u7FE2\201\u7FE2\201\u7FE2\201\u7FE2\201&quot;</span>+<br>    <span class="hljs-string">&quot;\u7FE2\201\u7FE2\201\u7FE2\201\u7FE2\201\u7FE2\201\u7FE2\201\u7FE2\201\u7FE2&quot;</span>+<br>    <span class="hljs-string">&quot;\201\u7FE2\201\u7FE2\201\u7FE2\uE800\025\u6800\031\uE800\026\u6800\031\u4800&quot;</span>+<br>    <span class="hljs-string">&quot;\u100F\u4800\u100F\u4800\u100F\u4800\u100F\u4800\u100F\u4800\u100F\u5000\u100F&quot;</span>+<br>    <span class="hljs-string">&quot;\u4800\u100F\u4800\u100F\u4800\u100F\u4800\u100F\u4800\u100F\u4800\u100F\u4800&quot;</span>+<br>    <span class="hljs-string">&quot;\u100F\u4800\u100F\u4800\u100F\u4800\u100F\u4800\u100F\u4800\u100F\u4800\u100F&quot;</span>+<br>    <span class="hljs-string">&quot;\u4800\u100F\u4800\u100F\u4800\u100F\u4800\u100F\u4800\u100F\u4800\u100F\u4800&quot;</span>+<br>    <span class="hljs-string">&quot;\u100F\u4800\u100F\u4800\u100F\u4800\u100F\u4800\u100F\u4800\u100F\u4800\u100F&quot;</span>+<br>    <span class="hljs-string">&quot;\u3800\014\u6800\030\u2800\u601A\u2800\u601A\u2800\u601A\u2800\u601A\u6800&quot;</span>+<br>    <span class="hljs-string">&quot;\034\u6800\030\u6800\033\u6800\034\000\u7005\uE800\035\u6800\031\u4800\u1010&quot;</span>+<br>    <span class="hljs-string">&quot;\u6800\034\u6800\033\u2800\034\u2800\031\u1800\u060B\u1800\u060B\u6800\033&quot;</span>+<br>    <span class="hljs-string">&quot;\u07FD\u7002\u6800\030\u6800\030\u6800\033\u1800\u050B\000\u7005\uE800\036&quot;</span>+<br>    <span class="hljs-string">&quot;\u6800\u080B\u6800\u080B\u6800\u080B\u6800\030\202\u7001\202\u7001\202\u7001&quot;</span>+<br>    <span class="hljs-string">&quot;\202\u7001\202\u7001\202\u7001\202\u7001\202\u7001\202\u7001\202\u7001\202&quot;</span>+<br>    <span class="hljs-string">&quot;\u7001\202\u7001\202\u7001\202\u7001\202\u7001\202\u7001\202\u7001\202\u7001&quot;</span>+<br>    <span class="hljs-string">&quot;\202\u7001\202\u7001\202\u7001\202\u7001\202\u7001\u6800\031\202\u7001\202&quot;</span>+<br>    <span class="hljs-string">&quot;\u7001\202\u7001\202\u7001\202\u7001\202\u7001\202\u7001\u07FD\u7002\201\u7002&quot;</span>+<br>    <span class="hljs-string">&quot;\201\u7002\201\u7002\201\u7002\201\u7002\201\u7002\201\u7002\201\u7002\201&quot;</span>+<br>    <span class="hljs-string">&quot;\u7002\201\u7002\201\u7002\201\u7002\201\u7002\201\u7002\201\u7002\201\u7002&quot;</span>+<br>    <span class="hljs-string">&quot;\201\u7002\201\u7002\201\u7002\201\u7002\201\u7002\201\u7002\201\u7002\u6800&quot;</span>+<br>    <span class="hljs-string">&quot;\031\201\u7002\201\u7002\201\u7002\201\u7002\201\u7002\201\u7002\201\u7002&quot;</span>+<br>    <span class="hljs-string">&quot;\u061D\u7002&quot;</span>;<br><br>  <span class="hljs-comment">// The B table has 256 entries for a total of 512 bytes.</span><br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> B[] = (<br>    <span class="hljs-string">&quot;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000&quot;</span>+<br>    <span class="hljs-string">&quot;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000&quot;</span>+<br>    <span class="hljs-string">&quot;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000&quot;</span>+<br>    <span class="hljs-string">&quot;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000&quot;</span>+<br>    <span class="hljs-string">&quot;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000&quot;</span>+<br>    <span class="hljs-string">&quot;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000&quot;</span>+<br>    <span class="hljs-string">&quot;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000&quot;</span>+<br>    <span class="hljs-string">&quot;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000&quot;</span>+<br>    <span class="hljs-string">&quot;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001&quot;</span>+<br>    <span class="hljs-string">&quot;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000&quot;</span>+<br>    <span class="hljs-string">&quot;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000&quot;</span>+<br>    <span class="hljs-string">&quot;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000&quot;</span>+<br>    <span class="hljs-string">&quot;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000&quot;</span>+<br>    <span class="hljs-string">&quot;\000\000\000\000\000\000\000\000\000&quot;</span>).toCharArray();<br><br>  <span class="hljs-comment">// In all, the character property tables require 1024 bytes.</span><br><br>    <span class="hljs-keyword">static</span> &#123;<br>                &#123; <span class="hljs-comment">// THIS CODE WAS AUTOMATICALLY CREATED BY GenerateCharacter:</span><br>            <span class="hljs-type">char</span>[] data = A_DATA.toCharArray();<br>            <span class="hljs-keyword">assert</span> (data.length == (<span class="hljs-number">256</span> * <span class="hljs-number">2</span>));<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (i &lt; (<span class="hljs-number">256</span> * <span class="hljs-number">2</span>)) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> data[i++] &lt;&lt; <span class="hljs-number">16</span>;<br>                A[j++] = entry | data[i++];<br>            &#125;<br>        &#125;<br><br>    &#125;        <br>&#125;<br></code></pre></td></tr></table></figure><p>说一下Latin1编码，Latin1是ISO-8859-1的别名，有些环境下写作Latin-1。</p><p> ISO-8859-1编码是单字节编码，向下兼容ASCII，其编码范围是0x00-0xFF，0x00-0x7F之间完全和ASCII一致，0x80-0x9F之间是控制字符，0xA0-0xFF之间是文字符号。</p><p>ISO-8859-1收录的字符除ASCII收录的字符外，还包括西欧语言、希腊语、泰语、阿拉伯语、希伯来语对应的文字符号。欧元符号出现的比较晚，没有被收录在ISO-8859-1当中。</p><p>因为ISO-8859-1编码范围使用了单字节内的所有空间，在支持ISO-8859-1的系统中传输和存储其他任何编码的字节流都不会被抛弃。换言之，把其他任何编码的字节流当作ISO-8859-1编码看待都没有问题。这是个很重要的特性，MySQL数据库默认编码是Latin1就是利用了这个特性。ASCII编码是一个7位的容器，ISO-8859-1编码是一个8位的容器。</p><p>回到我们的源代码中，可以看到最终A[]中存储了256个整数，就是使用有4个字节，32bits来存储的数，但是不能将这256个数当作一个整数来看待，没有任何的意义，需要读取32个比特位中特定的位的值，因为他代表着字符的属性。举个例子：ASCII表中的49代表’0’字符，获取这个字符对应的属性值为A[49]，转换后的二进制值如下：<br> 0- 0011-000  000000-0-0  0-011-01-10  000-01001</p><p>1位：0表示没有mirrored property,如果是’(‘，’[‘，这些字符，这个位置的值为1<br>4位：3<br>9位：无偏移<br>1位：无小写<br>1位：无大写<br>1位：无首字母大写属性<br>3位：3 表示是一个合法的Unicode标识符或Java标识符<br>2位：1 有数字的属性<br>5位：数字移位为0<br>5位：字符类型代表的值为9<br>既然能够得到每个字符的代表属性的整数，接下来当然就是编写方法取出特定二进制位上的值了。如要查看一个字符的类型，而这个类型由二进制位的最后5位表示，取出后5位的方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">getPropertiesEx</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>    <span class="hljs-type">char</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> (<span class="hljs-type">char</span>)ch;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> B[offset];<br>    <span class="hljs-keyword">return</span> props;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">getType</span><span class="hljs-params">(<span class="hljs-type">int</span> ch)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> getProperties(ch);<br>        <span class="hljs-keyword">return</span> (props &amp; <span class="hljs-number">0x1F</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-Security入门</title>
    <link href="/2022/11/18/Spring-Security/"/>
    <url>/2022/11/18/Spring-Security/</url>
    
    <content type="html"><![CDATA[<h1 id="1、Spring-Security简介"><a href="#1、Spring-Security简介" class="headerlink" title="1、Spring Security简介"></a>1、Spring Security简介</h1><p> Spring Security是 Spring 家族中的一个安全管理框架，是一个功能强大且高度可定制的身份验证和访问控制框架。认证和授权就是Spring Security作为安全框架的核心功能。</p><p>官方文档地址：<a href="https://spring.io/projects/spring-security/#learn">https://spring.io/projects/spring-security/#learn</a></p><h1 id="2、认证和授权"><a href="#2、认证和授权" class="headerlink" title="2、认证和授权"></a>2、认证和授权</h1><h2 id="认证（authentication）"><a href="#认证（authentication）" class="headerlink" title="认证（authentication）"></a>认证（authentication）</h2><p> 认证意味着确认你自己的身份，是关于验证你的凭据，如用户名&#x2F;邮箱和密码，以验证访问者的身份。系统确定你是否就是你所说的使用凭据。常见的认证方式有：</p><p>手机和短信验证码认证<br>用户名密码认证<br>邮箱和邮件验证码认证</p><h2 id="授权（authorization）"><a href="#授权（authorization）" class="headerlink" title="授权（authorization）"></a>授权（authorization）</h2><p> 授权意味着授予对系统的访问权限。授权发生在系统完成身份认证之后，最终会授予你访问资源（如信息，文件，数据库，资金，位置，几乎任何内容）的完全权限。简单来说，授权决定了你访问系统的能力以及达到的程度。</p><p> 授权是确定经过身份验证的用户是否可以访问特定资源的过程。就像给予某人官方许可做某事或任何事情。</p><h1 id="3、小试牛刀"><a href="#3、小试牛刀" class="headerlink" title="3、小试牛刀"></a>3、小试牛刀</h1><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><p> 创建一个 Spring Boot 的 web 项目，并导入部分依赖，这里为方便测试，直接利用 Thymleaf 进行前后端交互。pom文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.demo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spsc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>spsc<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--web--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--thyneleof模板--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--spring security模块--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p> 前端展示页面较为简单，结构如下（level1&#x2F;2&#x2F;3分别对应vip1&#x2F;2&#x2F;3，login为自定义登录页，index为首页）：</p><p><img src="/img/202211181918.jpg"></p><p><img src="/img/202211181919.jpg"></p><h2 id="Spring-Security配置"><a href="#Spring-Security配置" class="headerlink" title="Spring Security配置"></a>Spring Security配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.spsc.config;<br><br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-comment">//授权</span><br>    <span class="hljs-comment">//链式编程</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//首页所有人都能访问，功能页只对有权限的用户开放</span><br>        <span class="hljs-comment">//请求授权的规则，角色等</span><br>        http.authorizeHttpRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/&quot;</span>).permitAll()<br>                .antMatchers(<span class="hljs-string">&quot;/level1/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip1&quot;</span>)<br>                .antMatchers(<span class="hljs-string">&quot;/level2/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip2&quot;</span>)<br>                .antMatchers(<span class="hljs-string">&quot;/level3/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip3&quot;</span>);<br><br>        <span class="hljs-comment">//没有权限会默认到登录页，但该页为内部默认登录页，而不是我们自己写的登录页。也可以将该方法用and()拼接到上面的链式编程上</span><br>        <span class="hljs-comment">//可以自定义登录页,前者为前往登录页，后者为登录提交url（与前端对应），参数也需对应，如不对应，也可在下面手动对应</span><br>        http.formLogin().loginPage(<span class="hljs-string">&quot;/toLoginForm&quot;</span>).usernameParameter(<span class="hljs-string">&quot;username&quot;</span>).passwordParameter(<span class="hljs-string">&quot;password&quot;</span>).loginProcessingUrl(<span class="hljs-string">&quot;/login&quot;</span>);<br><br>        <span class="hljs-comment">//开启注销功能,注销后跳转到首页</span><br>        http.logout().logoutSuccessUrl(<span class="hljs-string">&quot;/&quot;</span>);<br><br>        <span class="hljs-comment">//开启记住我功能,利用cookie默认保存两周,参数也需和前端对应</span><br>        http.rememberMe().rememberMeParameter(<span class="hljs-string">&quot;remember&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//认证，注意：在springboot2.1以上的版本中，会报错：密码未编码,在下面加入passwordEncoder方法可解决</span><br>    <span class="hljs-comment">//spring5 security5.0+的版本中，新增多种加密算法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//在内存中进行认证,也可使用jdbc相关方法通过数据库认证</span><br>        auth.inMemoryAuthentication().passwordEncoder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>())<br>                .withUser(<span class="hljs-string">&quot;xlh&quot;</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip1&quot;</span>,<span class="hljs-string">&quot;vip2&quot;</span>)<br>                .and()<br>                .withUser(<span class="hljs-string">&quot;root&quot;</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip1&quot;</span>,<span class="hljs-string">&quot;vip2&quot;</span>,<span class="hljs-string">&quot;vip3&quot;</span>)<br>                .and()<br>                .withUser(<span class="hljs-string">&quot;guest&quot;</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip1&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.spsc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RouterController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/index&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/toLoginForm&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toLogin</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;views/login&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/level1/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">level1</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;views/level1/&quot;</span>+id;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/level2/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">level2</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;views/level2/&quot;</span>+id;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/level3/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">level3</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;views/level3/&quot;</span>+id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2>]]></content>
    
    
    <categories>
      
      <category>后端工具框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Integer的parseInt方法为什么用负数存储结果</title>
    <link href="/2022/11/16/jdk-parseInt/"/>
    <url>/2022/11/16/jdk-parseInt/</url>
    
    <content type="html"><![CDATA[<p>JDK的Integer的parseInt方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">parseInt</span><span class="hljs-params">(String s, <span class="hljs-type">int</span> radix)</span> <span class="hljs-keyword">throws</span> NumberFormatException<br>    &#123;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberFormatException</span>(<span class="hljs-string">&quot;null&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (radix &lt; Character.MIN_RADIX) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberFormatException</span>(<span class="hljs-string">&quot;radix &quot;</span> + radix +<br>                                            <span class="hljs-string">&quot; less than Character.MIN_RADIX&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (radix &gt; Character.MAX_RADIX) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberFormatException</span>(<span class="hljs-string">&quot;radix &quot;</span> + radix +<br>                                            <span class="hljs-string">&quot; greater than Character.MAX_RADIX&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">negative</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, len = s.length();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">limit</span> <span class="hljs-operator">=</span> -Integer.MAX_VALUE;<br>        <span class="hljs-type">int</span> multmin;<br>        <span class="hljs-type">int</span> digit;<br><br>        <span class="hljs-keyword">if</span> (len &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">firstChar</span> <span class="hljs-operator">=</span> s.charAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (firstChar &lt; <span class="hljs-string">&#x27;0&#x27;</span>) &#123; <span class="hljs-comment">// Possible leading &quot;+&quot; or &quot;-&quot;</span><br>                <span class="hljs-keyword">if</span> (firstChar == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>                    negative = <span class="hljs-literal">true</span>;<br>                    limit = Integer.MIN_VALUE;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (firstChar != <span class="hljs-string">&#x27;+&#x27;</span>)<br>                    <span class="hljs-keyword">throw</span> NumberFormatException.forInputString(s);<br><br>                <span class="hljs-keyword">if</span> (len == <span class="hljs-number">1</span>) <span class="hljs-comment">// Cannot have lone &quot;+&quot; or &quot;-&quot;</span><br>                    <span class="hljs-keyword">throw</span> NumberFormatException.forInputString(s);<br>                i++;<br>            &#125;<br>            multmin = limit / radix;<br>            <span class="hljs-keyword">while</span> (i &lt; len) &#123;<br>                <span class="hljs-comment">// Accumulating negatively avoids surprises near MAX_VALUE</span><br>                digit = Character.digit(s.charAt(i++),radix);<br>                <span class="hljs-keyword">if</span> (digit &lt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">throw</span> NumberFormatException.forInputString(s);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (result &lt; multmin) &#123;<br>                    <span class="hljs-keyword">throw</span> NumberFormatException.forInputString(s);<br>                &#125;<br>                result *= radix;<br>                <span class="hljs-keyword">if</span> (result &lt; limit + digit) &#123;<br>                    <span class="hljs-keyword">throw</span> NumberFormatException.forInputString(s);<br>                &#125;<br>                result -= digit;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> NumberFormatException.forInputString(s);<br>        &#125;<br>        <span class="hljs-keyword">return</span> negative ? result : -result;<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到返回值是result，正负的标记位是bool negative 默认是false，第一位为负号时为true</p><p>再看返回时，负号的情况为result 没有负号取负result，中间计算时也是减去中间变量digit。</p><p>也就是result是负数存储，是它是从负值开始算的。即，解析“123“的话，依次解析的结果是，-1，-12，-123，然后根据符号，取相</p><p>数。<strong>那么在计算过程中为什么不直接用正号操作呢</strong>？答案是<strong>防止越界</strong></p><p>32位整型里面，由于符号位要占用一位，所以最大值为2147483647，而最小值为-2147483648</p><p>如果我们要解析的数是 -2147483648, 那么, 在解析的过程中, 需要存储一个 2147483648 的值, 那么直接用 int 存储 2147483648, 会发</p><p>溢出。因此这里的解决方案是, 使用负数来进行存储, 避免溢出。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java内存结构[未完成]</title>
    <link href="/2022/10/05/java%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/10/05/java%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/20210219234921457.png"></p><p>栈 —— 线程</p><p>栈帧 —— 方法</p><ul><li>局部变量表</li><li>操作数栈</li><li>动态链接</li><li>方法返回地址</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>根据需求做库表设计的技巧</title>
    <link href="/2022/09/07/%E5%BA%93%E8%A1%A8%E8%AE%BE%E8%AE%A1/"/>
    <url>/2022/09/07/%E5%BA%93%E8%A1%A8%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h4 id="从需求到库表设计，你需要注意的点"><a href="#从需求到库表设计，你需要注意的点" class="headerlink" title="从需求到库表设计，你需要注意的点"></a>从需求到库表设计，你需要注意的点</h4><ul><li><p>思路：词性分析法，动词体现关系，名词体现表或者字段，可以先弄出实体，在讨论实体之间的关系。</p></li><li><p>表名，建议带上业务前缀 order_pay、order_pay_detail等</p></li><li><p>utf-8占用3个字节，无法存储emoji表情，utf8mb4占4个字节，可以存表情</p></li><li><p>能记录越多信息越好（免得以后要实现新功能，结果信息不够用）。</p></li><li><p>表必须有一个主键，非主键列必须 <strong>直接 完全</strong> 依赖主键（3NF）</p></li><li><p>当表的数量比较多，查询数据需要多表关联时，会导致查询性能低下，这时候适当利用反范式解决。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法与数据结构</title>
    <link href="/2022/07/27/code/"/>
    <url>/2022/07/27/code/</url>
    
    <content type="html"><![CDATA[<h1 id="数组的中位数：基于快排"><a href="#数组的中位数：基于快排" class="headerlink" title="数组的中位数：基于快排"></a>数组的中位数：基于快排</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">median</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-comment">// Please note: the `k` must be (nums.length + 1) / 2 - 1 in order to satisfy the requirement</span><br>    <span class="hljs-keyword">return</span> partition(nums, <span class="hljs-number">0</span>, nums.length - <span class="hljs-number">1</span>, nums.length/<span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-comment">// Same to find kth smallest element in an array</span><br><span class="hljs-comment">// Modified for the partition function of quicksort</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">partition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">if</span> (left == right) &#123;<br>        <span class="hljs-keyword">return</span> nums[k];<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> left;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> right;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">pivot</span> <span class="hljs-operator">=</span> nums[(end - start) / <span class="hljs-number">2</span> + start];<br>    <span class="hljs-keyword">while</span> (start &lt;= end) &#123;<br>        <span class="hljs-keyword">while</span> (nums[start] &lt; pivot &amp;&amp; start &lt;= end) &#123;<br>            start++;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (nums[end] &gt; pivot &amp;&amp; start &lt;= end) &#123;<br>            end--;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (start &lt;= end) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> nums[start];<br>            nums[start] = nums[end];<br>            nums[end] = temp;<br>            start++;<br>            end--;<br>        &#125;<br>    &#125;<br>    <br>    <br>    <span class="hljs-keyword">if</span> (k &lt;= end) &#123;<br>        <span class="hljs-keyword">return</span> partition(nums, left, end, k);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k &gt;= start) &#123;<br>        <span class="hljs-keyword">return</span> partition(nums, start, right, k);<br>    &#125;<br>    <span class="hljs-keyword">return</span> nums[k];<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue项目启动报错</title>
    <link href="/2022/07/08/vue%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/"/>
    <url>/2022/07/08/vue%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h1 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h1><p>在启动一个 Vue 项目时，出现如下报错：</p><p><img src="/img/vue-error.jpg"></p><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><ul><li><p>可能原因：电脑缺少cmd运行程序的环境变量</p></li><li><p>解决方法：在环境变量 Path 中加入 C:\Windows\System32 和 %SystemRoot%\system32;（注意加分号），然后重启电脑；</p><p><img src="/img/vue-error2.jpg"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>问题解决</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue-Ajax(axios)</title>
    <link href="/2022/07/01/vue-ajax/"/>
    <url>/2022/07/01/vue-ajax/</url>
    
    <content type="html"><![CDATA[<p>初学vue，记录请求发送的方式</p><h2 id="GET示例"><a href="#GET示例" class="headerlink" title="GET示例"></a>GET示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">info</span>: <span class="hljs-literal">null</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 钩子函数，实例化时触发</span><br>  mounted () &#123;<br>    axios<br>      .<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://www.runoob.com/try/ajax/json_demo.json&#x27;</span>)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span> = response))<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123; <span class="hljs-comment">// 请求失败处理</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>      &#125;);<br>  &#125;<br>&#125;)<br><br>&lt;script src=<span class="hljs-string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="POST示例"><a href="#POST示例" class="headerlink" title="POST示例"></a>POST示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">info</span>: <span class="hljs-literal">null</span><br>    &#125;<br>  &#125;,<br>  mounted () &#123;<br>    axios<br>      .<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;https://www.runoob.com/try/ajax/demo_axios_post.php&#x27;</span>)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span> = response))<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123; <span class="hljs-comment">// 请求失败处理</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>      &#125;);<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="执行多个并发请求"><a href="#执行多个并发请求" class="headerlink" title="执行多个并发请求"></a>执行多个并发请求</h2><ul><li><p>axios.all 方法接受一个数组作为参数，数组中的每个元素都是一个请求，返回一个 promise 对象，当数组中所有请求均已完成时，执行then方法。</p></li><li><p>在then方法中执行了 axios.spread 方法。该方法是接收一个函数作为参数，返回一个新的函数。接收的参数函数的参数是axios.all方法中每个请求返回的响应。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUserAccount</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/12345&#x27;</span>);<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUserPermissions</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/12345/permissions&#x27;</span>);<br>&#125;<br>axios.<span class="hljs-title function_">all</span>([<span class="hljs-title function_">getUserAccount</span>(), <span class="hljs-title function_">getUserPermissions</span>()])<br>  .<span class="hljs-title function_">then</span>(axios.<span class="hljs-title function_">spread</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">acct, perms</span>) &#123;<br>    <span class="hljs-comment">// 两个请求现在都执行完成</span><br>  &#125;));<br><span class="hljs-comment">// acct   为方法一 getUserAccount()  的返回值</span><br><span class="hljs-comment">// perms  为方法二 getUserPermissions() 的返回值</span><br></code></pre></td></tr></table></figure><h2 id="axios-API"><a href="#axios-API" class="headerlink" title="axios API"></a>axios API</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 发送 POST 请求</span><br><span class="hljs-title function_">axios</span>(&#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/user/12345&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Fred&#x27;</span>,<br>    <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Flintstone&#x27;</span><br>  &#125;<br>&#125;);<br><span class="hljs-comment">//  GET 请求远程图片</span><br><span class="hljs-title function_">axios</span>(&#123;<br>  <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;get&#x27;</span>,<br>  <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;https://static.runoob.com/images/runoob-logo.png&#x27;</span>,<br>  <span class="hljs-attr">responseType</span>:<span class="hljs-string">&#x27;stream&#x27;</span><br>&#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;<br>  response.<span class="hljs-property">data</span>.<span class="hljs-title function_">pipe</span>(fs.<span class="hljs-title function_">createWriteStream</span>(<span class="hljs-string">&#x27;ada_lovelace.jpg&#x27;</span>))<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> instance = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;https://some-domain.com/api/&#x27;</span>,<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">1000</span>,<br>  <span class="hljs-attr">headers</span>: &#123;<span class="hljs-string">&#x27;X-Custom-Header&#x27;</span>: <span class="hljs-string">&#x27;foobar&#x27;</span>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="请求配置项"><a href="#请求配置项" class="headerlink" title="请求配置项"></a>请求配置项</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 只有 url 是必需的,method 默认为 get 方法</span><br>&#123;<br>  <span class="hljs-comment">// `url` 是用于请求的服务器 URL</span><br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br><br>  <span class="hljs-comment">// `method` 是创建请求时使用的方法</span><br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-comment">// 默认是 get</span><br><br>  <span class="hljs-comment">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span><br>  <span class="hljs-comment">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span><br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;https://some-domain.com/api/&quot;</span>,<br><br>  <span class="hljs-comment">// `transformRequest` 允许在向服务器发送前，修改请求数据</span><br>  <span class="hljs-comment">// 只能用在 &quot;PUT&quot;, &quot;POST&quot; 和 &quot;PATCH&quot; 这几个请求方法</span><br>  <span class="hljs-comment">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span><br>  <span class="hljs-attr">transformRequest</span>: [<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-comment">// 对 data 进行任意转换处理</span><br><br>    <span class="hljs-keyword">return</span> data;<br>  &#125;],<br><br>  <span class="hljs-comment">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span><br>  <span class="hljs-attr">transformResponse</span>: [<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-comment">// 对 data 进行任意转换处理</span><br><br>    <span class="hljs-keyword">return</span> data;<br>  &#125;],<br><br>  <span class="hljs-comment">// `headers` 是即将被发送的自定义请求头</span><br>  <span class="hljs-attr">headers</span>: &#123;<span class="hljs-string">&quot;X-Requested-With&quot;</span>: <span class="hljs-string">&quot;XMLHttpRequest&quot;</span>&#125;,<br><br>  <span class="hljs-comment">// `params` 是即将与请求一起发送的 URL 参数</span><br>  <span class="hljs-comment">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span><br>  <span class="hljs-attr">params</span>: &#123;<br>    <span class="hljs-attr">ID</span>: <span class="hljs-number">12345</span><br>  &#125;,<br><br>  <span class="hljs-comment">// `paramsSerializer` 是一个负责 `params` 序列化的函数</span><br>  <span class="hljs-comment">// (e.g. https://www.npmjs.com/package/qs, https://api.jquery.com/jquery.param/)</span><br>  <span class="hljs-attr">paramsSerializer</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">params</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Qs</span>.<span class="hljs-title function_">stringify</span>(params, &#123;<span class="hljs-attr">arrayFormat</span>: <span class="hljs-string">&quot;brackets&quot;</span>&#125;)<br>  &#125;,<br><br>  <span class="hljs-comment">// `data` 是作为请求主体被发送的数据</span><br>  <span class="hljs-comment">// 只适用于这些请求方法 &quot;PUT&quot;, &quot;POST&quot;, 和 &quot;PATCH&quot;</span><br>  <span class="hljs-comment">// 在没有设置 `transformRequest` 时，必须是以下类型之一：</span><br>  <span class="hljs-comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span><br>  <span class="hljs-comment">// - 浏览器专属：FormData, File, Blob</span><br>  <span class="hljs-comment">// - Node 专属： Stream</span><br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&quot;Fred&quot;</span><br>  &#125;,<br><br>  <span class="hljs-comment">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span><br>  <span class="hljs-comment">// 如果请求花费了超过 `timeout` 的时间，请求将被中断</span><br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">1000</span>,<br><br>  <span class="hljs-comment">// `withCredentials` 表示跨域请求时是否需要使用凭证</span><br>  <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 默认的</span><br><br>  <span class="hljs-comment">// `adapter` 允许自定义处理请求，以使测试更轻松</span><br>  <span class="hljs-comment">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span><br>  <span class="hljs-attr">adapter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-comment">/* ... */</span><br>  &#125;,<br><br>  <span class="hljs-comment">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span><br>  <span class="hljs-comment">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</span><br>  <span class="hljs-attr">auth</span>: &#123;<br>    <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;janedoe&quot;</span>,<br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;s00pers3cret&quot;</span><br>  &#125;,<br><br>  <span class="hljs-comment">// `responseType` 表示服务器响应的数据类型，可以是 &quot;arraybuffer&quot;, &quot;blob&quot;, &quot;document&quot;, &quot;json&quot;, &quot;text&quot;, &quot;stream&quot;</span><br>  <span class="hljs-attr">responseType</span>: <span class="hljs-string">&quot;json&quot;</span>, <span class="hljs-comment">// 默认的</span><br><br>  <span class="hljs-comment">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span><br>  <span class="hljs-attr">xsrfCookieName</span>: <span class="hljs-string">&quot;XSRF-TOKEN&quot;</span>, <span class="hljs-comment">// default</span><br><br>  <span class="hljs-comment">// `xsrfHeaderName` 是承载 xsrf token 的值的 HTTP 头的名称</span><br>  <span class="hljs-attr">xsrfHeaderName</span>: <span class="hljs-string">&quot;X-XSRF-TOKEN&quot;</span>, <span class="hljs-comment">// 默认的</span><br><br>  <span class="hljs-comment">// `onUploadProgress` 允许为上传处理进度事件</span><br>  <span class="hljs-attr">onUploadProgress</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">progressEvent</span>) &#123;<br>    <span class="hljs-comment">// 对原生进度事件的处理</span><br>  &#125;,<br><br>  <span class="hljs-comment">// `onDownloadProgress` 允许为下载处理进度事件</span><br>  <span class="hljs-attr">onDownloadProgress</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">progressEvent</span>) &#123;<br>    <span class="hljs-comment">// 对原生进度事件的处理</span><br>  &#125;,<br><br>  <span class="hljs-comment">// `maxContentLength` 定义允许的响应内容的最大尺寸</span><br>  <span class="hljs-attr">maxContentLength</span>: <span class="hljs-number">2000</span>,<br><br>  <span class="hljs-comment">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span><br>  <span class="hljs-attr">validateStatus</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">status</span>) &#123;<br>    <span class="hljs-keyword">return</span> status &amp;gt;= <span class="hljs-number">200</span> &amp;amp;&amp;amp; status &amp;lt; <span class="hljs-number">300</span>; <span class="hljs-comment">// 默认的</span><br>  &#125;,<br><br>  <span class="hljs-comment">// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span><br>  <span class="hljs-comment">// 如果设置为0，将不会 follow 任何重定向</span><br>  <span class="hljs-attr">maxRedirects</span>: <span class="hljs-number">5</span>, <span class="hljs-comment">// 默认的</span><br><br>  <span class="hljs-comment">// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span><br>  <span class="hljs-comment">// `keepAlive` 默认没有启用</span><br>  <span class="hljs-attr">httpAgent</span>: <span class="hljs-keyword">new</span> http.<span class="hljs-title class_">Agent</span>(&#123; <span class="hljs-attr">keepAlive</span>: <span class="hljs-literal">true</span> &#125;),<br>  <span class="hljs-attr">httpsAgent</span>: <span class="hljs-keyword">new</span> https.<span class="hljs-title class_">Agent</span>(&#123; <span class="hljs-attr">keepAlive</span>: <span class="hljs-literal">true</span> &#125;),<br><br>  <span class="hljs-comment">// &quot;proxy&quot; 定义代理服务器的主机名称和端口</span><br>  <span class="hljs-comment">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span><br>  <span class="hljs-comment">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span><br>  <span class="hljs-attr">proxy</span>: &#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">9000</span>,<br>    <span class="hljs-attr">auth</span>: : &#123;<br>      <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;mikeymike&quot;</span>,<br>      <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;rapunz3l&quot;</span><br>    &#125;<br>  &#125;,<br><br>  <span class="hljs-comment">// `cancelToken` 指定用于取消请求的 cancel token</span><br>  <span class="hljs-comment">// （查看后面的 Cancellation 这节了解更多）</span><br>  <span class="hljs-attr">cancelToken</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">CancelToken</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">cancel</span>) &#123;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="响应结构"><a href="#响应结构" class="headerlink" title="响应结构"></a>响应结构</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-comment">// `data` 由服务器提供的响应</span><br>  <span class="hljs-attr">data</span>: &#123;&#125;,<br><br>  <span class="hljs-comment">// `status`  HTTP 状态码</span><br>  <span class="hljs-attr">status</span>: <span class="hljs-number">200</span>,<br><br>  <span class="hljs-comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span><br>  <span class="hljs-attr">statusText</span>: <span class="hljs-string">&quot;OK&quot;</span>,<br><br>  <span class="hljs-comment">// `headers` 服务器响应的头</span><br>  <span class="hljs-attr">headers</span>: &#123;&#125;,<br><br>  <span class="hljs-comment">// `config` 是为请求提供的配置信息</span><br>  <span class="hljs-attr">config</span>: &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="配置默认值"><a href="#配置默认值" class="headerlink" title="配置默认值"></a>配置默认值</h2><ul><li>可以指定将被用在各个请求的配置默认值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">baseURL</span> = <span class="hljs-string">&#x27;https://api.example.com&#x27;</span>;<br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">headers</span>.<span class="hljs-property">common</span>[<span class="hljs-string">&#x27;Authorization&#x27;</span>] = <span class="hljs-variable constant_">AUTH_TOKEN</span>;<br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">headers</span>.<span class="hljs-property">post</span>[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>配置的优先顺序<ul><li>查找顺序是：在 lib&#x2F;defaults.js 找到的库的默认值，然后是实例的 defaults 属性，最后是请求的 config 参数。后者优先于前者。</li></ul></li></ul><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><ul><li>在请求或响应被 then 或 catch 处理前拦截它们</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 添加请求拦截器</span><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-comment">// 在发送请求之前做些什么</span><br>    <span class="hljs-keyword">return</span> config;<br>  &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-comment">// 对请求错误做些什么</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;);<br><br><span class="hljs-comment">// 添加响应拦截器</span><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-comment">// 对响应数据做点什么</span><br>    <span class="hljs-keyword">return</span> response;<br>  &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-comment">// 对响应错误做点什么</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端工具框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>详解MySQL分区</title>
    <link href="/2022/02/28/mysql%E5%88%86%E5%8C%BA/"/>
    <url>/2022/02/28/mysql%E5%88%86%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="一、分区简介"><a href="#一、分区简介" class="headerlink" title="一、分区简介"></a>一、分区简介</h1><h2 id="分区是什么"><a href="#分区是什么" class="headerlink" title="分区是什么"></a>分区是什么</h2><p>表分区：分区是根据一定的规则，数据库把一个表分解成多个更小的、更容易管理的部分。就访问数据库应用而言，逻辑上就只有一个表或者一个索引，但实际上这个表可能有N个物理分区对象组成，每个分区都是一个独立的对象，可以独立处理，可以作为表的一部分进行处理。</p><ul><li>分区不影响程序员编程：<strong>分区对应用来说是完全透明的，不影响应用的业务逻辑</strong>。</li><li>主键&#x2F;唯一键：无论哪种分区，要么你分区表上没有主键&#x2F;唯一键，要么分区表的主键&#x2F;唯一键都必须包含分区键，也就是说<strong>不能使用主键&#x2F;唯一键字段之外的其它字段分区</strong>。</li></ul><h2 id="分区能做什么"><a href="#分区能做什么" class="headerlink" title="分区能做什么"></a>分区能做什么</h2><ul><li>逻辑数据分割</li><li>提高单一的写和读应用速度</li><li>提高分区范围读查询的速度</li><li>分割数据能够有多个不同的物理文件路径</li><li>高效的保存历史数据</li><li>一个表上的约束检查</li><li>不同的主从服务器分区策略，例如master按Hash分区，slave按range分区</li></ul><h2 id="和分表的区别"><a href="#和分表的区别" class="headerlink" title="和分表的区别"></a>和分表的区别</h2><p>大表的数据分割到多张小表：分区和水平分表功能类似，将一个大表的数据分割到多张小表中去，由于查询不需要全表扫描了，只需要扫描某些分区，所以分区能提高查询速度。</p><p>水平分表：用户设定：需要用户预先手动显式创建出多张分表(如tbl_user0, tbl_user1, tbl_user2)，在物理上实实在在的创建多张表，通过客户端代理(Sharding-JDBC等)或者中间件代理(Mycat等)来实现分表逻辑。</p><p>分区：mysql默认帮你做，是MySQL的一个插件Plugin功能，将一张大表的数据在数据库底层分成多个分区文件(如tbl_user#P#p0.ibd, tbl_user#P#p1.ibd, tbl_user#P#p2.ibd)，和水平分表不同的是分区不需要显式的创建“分表”,数据库会自动创建分区文件的，用户看到的只是一张普通的表，其实是对应的是多个分区，这个是对用户是屏蔽的、透明的，在使用上和使用一张表完全一样，不需要借助任何功能来实现。分区是一种逻辑上的水平分表，在物理层面还是一张表。</p><table><thead><tr><th>分表</th><th>分区</th></tr></thead><tbody><tr><td>手动分表</td><td>自动分区</td></tr><tr><td>多张数据表</td><td>一张数据表</td></tr><tr><td>重复数据的风险</td><td>没有数据重复的风险</td></tr><tr><td>写入多张表</td><td>写入一张表</td></tr><tr><td>没有统一的约束限制</td><td>强制的约束限制</td></tr></tbody></table><h1 id="二、分区类型及用法"><a href="#二、分区类型及用法" class="headerlink" title="二、分区类型及用法"></a>二、分区类型及用法</h1><h2 id="1-Range-partition-范围分区"><a href="#1-Range-partition-范围分区" class="headerlink" title="1 Range partition(范围分区)"></a>1 Range partition(范围分区)</h2><p>Range partition是按照分区表达式的运算结果，判断结果落在某个范围内，从而将数据存储在对应的分区。各个分区定义之间需要连续且不能重叠，范围分区通过partition by range子句定义，而分区的范围通过values less than子句划分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table employees (<br>    id int not null primary key,<br>    first_name varchar(30),<br>    last_name varchar(30))<br>    partition by range(id)(<br>    partition p0 values less than (11),<br>    partition p1 values less than (21),<br>    partition p2 values less than (31),<br>    partition p3 values less than (41)<br>    );<br></code></pre></td></tr></table></figure><h2 id="2-List-partition-列表分区"><a href="#2-List-partition-列表分区" class="headerlink" title="2 List partition(列表分区)"></a>2 List partition(列表分区)</h2><p>列表分区和范围分区类似，主要区别是list partition的分区范围是预先定义好的一系列值，而不是连续的范围。列表分区采用partition by list和values in子句定义。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE employees (<br>    id INT NOT NULL,<br>    fname VARCHAR(30),<br>    lname VARCHAR(30)<br>)<br>PARTITION BY LIST(id) (<br>    PARTITION p0 VALUES IN (1,3,5,7,9),<br>    PARTITION p1 VALUES IN (2,4,6,8,10)<br>);<br></code></pre></td></tr></table></figure><h2 id="3-Hash-partition-哈希分区"><a href="#3-Hash-partition-哈希分区" class="headerlink" title="3 Hash partition(哈希分区)"></a>3 Hash partition(哈希分区)</h2><p>Hash partition主要的应用场景是将数据平均的分布在指定数量的hash分区中。在range和list分区类型中，根据分区条件的计算结果，数据可以确定存储在哪个分区，而在hash分区中，数据存储在某个分区是由数据库自己决定的，你只需要指定分区的数量。</p><p>要创建hash分区，你需要使用create table的partition by hash(expr)子句，其中expr是整数类型的列或返还整数的表达式。另外还需要使用partions num来指定hash分区的数量(若忽略partitions子句则默认只创建1个hash分区)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE employees (<br>    id INT NOT NULL,<br>    first_name VARCHAR(30),<br>    last_name VARCHAR(30)<br>)<br>PARTITION BY HASH(id)<br>PARTITIONS 4;<br></code></pre></td></tr></table></figure><h2 id="4-Key-partition-键值分区"><a href="#4-Key-partition-键值分区" class="headerlink" title="4 Key partition(键值分区)"></a>4 Key partition(键值分区)</h2><p>Key paritition与hash分区类似，主要区别在于key partition的hash函数是由MySQL server提供的，且使用主键（或非空唯一键）作为分区列：</p><h1 id="三、分区做性能优化"><a href="#三、分区做性能优化" class="headerlink" title="三、分区做性能优化"></a>三、分区做性能优化</h1><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>数据量很大时，b树索引几乎失效</p><ul><li>回表后，返回量太大，响应时间巨慢、除非索引覆盖</li><li>维护索引代价高</li></ul><p>使用分区：</p><ul><li>全量扫描数据，不使用索引：根据分区规则大致定位需要的数据的位置</li><li>索引数据，并分离热点，如果数据存在热点，可以选择将热点单独存放于一个分区中，这样查询可以使用索引，也可以用缓存</li></ul><h2 id="分区失效"><a href="#分区失效" class="headerlink" title="分区失效"></a>分区失效</h2><ul><li>NULL值使分区过滤无效</li><li>分区列和索引列不匹配</li><li>选择分区的成本可能很高</li><li>打开并锁住底层表的成本可能很高</li><li>维护分区成本可能很高</li><li>存储引擎不支持或不同</li></ul>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swagger-接口文档利器</title>
    <link href="/2022/02/26/Swagger/"/>
    <url>/2022/02/26/Swagger/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Swagger支持 API 自动生成同步的在线文档：使用 Swagger 后可以直接通过代码生成文档，不再需要自己手动编写接口文档了<br>提供 Web 页面在线测试 API：光有文档还不够，Swagger 生成的文档还支持在线测试</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p> 下面将给出在SpringBoot2项目中使用Swagger的基本步骤，这里将Swagger配置类单独拿出，作为公共配置部分。</p><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><p>在pom.xml文件中导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--swagger--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="添加配置类"><a href="#添加配置类" class="headerlink" title="添加配置类"></a>添加配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xlh.yygh.common.config;<br><br><span class="hljs-keyword">import</span> com.google.common.base.Predicates;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.service.Contact;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Swagger2配置信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Swagger2Config</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">webApiConfig</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .groupName(<span class="hljs-string">&quot;webApi&quot;</span>)<br>                .apiInfo(webApiInfo())<br>                .select()<br>                <span class="hljs-comment">//只显示api路径下的页面</span><br>                .paths(Predicates.and(PathSelectors.regex(<span class="hljs-string">&quot;/api/.*&quot;</span>)))<br>                .build();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">adminApiConfig</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .groupName(<span class="hljs-string">&quot;adminApi&quot;</span>)<br>                .apiInfo(adminApiInfo())<br>                .select()<br>                <span class="hljs-comment">//只显示admin路径下的页面</span><br>                .paths(Predicates.and(PathSelectors.regex(<span class="hljs-string">&quot;/admin/.*&quot;</span>)))<br>                .build();<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">webApiInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;网站-API文档&quot;</span>)<br>                .description(<span class="hljs-string">&quot;本文档描述了网站微服务接口定义&quot;</span>)<br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;xlh&quot;</span>, <span class="hljs-string">&quot;http://xlh.com&quot;</span>, <span class="hljs-string">&quot;1583677918@qq.com&quot;</span>))<br>                .build();<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">adminApiInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;后台管理系统-API文档&quot;</span>)<br>                .description(<span class="hljs-string">&quot;本文档描述了后台管理系统微服务接口定义&quot;</span>)<br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;xlh&quot;</span>, <span class="hljs-string">&quot;http://xlh.com&quot;</span>, <span class="hljs-string">&quot;1583677918@qq.com&quot;</span>))<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="启动类扫描"><a href="#启动类扫描" class="headerlink" title="启动类扫描"></a>启动类扫描</h3><p>注意：需要将配置类所在模块在pom.xml中引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xlh<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>service_util<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xlh.yygh.hosp;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-comment">// 扫描自己和导入的所有包</span><br><span class="hljs-meta">@ComponentScan(basePackages = &quot;com.xlh&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceHospApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ServiceHospApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>可在controller中添加接口说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xlh.yygh.hosp.controller;<br><br><span class="hljs-keyword">import</span> com.xlh.yygh.hosp.service.HospitalSetService;<br><span class="hljs-keyword">import</span> com.xlh.yygh.model.hosp.HospitalSet;<br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Api(tags = &quot;医院设置管理&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin/hosp/hospitalSet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HospitalSetController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HospitalSetService hospitalSetService;<br><br>    <span class="hljs-comment">//查找表内所有数据</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;获取所有医院设置&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/findAll&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;HospitalSet&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> hospitalSetService.list();<br>    &#125;<br><br>    <span class="hljs-comment">//根据删除id删除数据</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;根据id逻辑删除医院设置&quot;)</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">removeHospSet</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span>&#123;<br>        <span class="hljs-keyword">return</span> hospitalSetService.removeById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li><p>运行项目，在浏览器打开链接<a href="http://localhost:8201/swagger-ui.html">http://localhost:8201/swagger-ui.html</a></p></li><li><p>测试查询</p></li><li><p>测试删除</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>后端工具框架</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Socket学习笔记</title>
    <link href="/2021/12/17/scoket/"/>
    <url>/2021/12/17/scoket/</url>
    
    <content type="html"><![CDATA[<p>socket属于传输层</p><p>socket是基于应用服务与TCP&#x2F;IP通信之间的一个抽象，他将TCP&#x2F;IP协议里面复杂的通信逻辑进行分装，对用户来说，只要通过一组简单的API就可以实现网络的连接。</p><p><img src="/img/net/socket.png" alt="socket"></p><h1 id="粘包"><a href="#粘包" class="headerlink" title="粘包"></a><strong>粘包</strong></h1><p>出现粘包现象的原因是多方面的:</p><p>1)发送方粘包：由TCP协议本身造成的，TCP为提高传输效率，发送方往往要收集到足够多的数据后才发送一包数据。若连续几次发送的数据都很少，通常TCP会根据优化算法把这些数据合成一包后一次发送出去，这样接收方就收到了粘包数据。</p><p>2)接收方粘包：接收方用户进程不及时接收数据，从而导致粘包现象。这是因为接收方先把收到的数据放在系统s接收缓冲区，用户进程从该缓冲区取数据，若下一包数据到达时前一包数据尚未被用户进程取走，则下一包数据放到系统接收缓冲区时就接到前一包数据之后，而用户进程根据预先设定的缓冲区大小从系统接收缓冲区取数据，这样就一次取到了多包数据。</p><p><img src="/img/net/tcp.png" alt="tcp"></p><p>粘包：多个数据包一起放在了缓冲区</p><ol><li>如果发送方发送的多组数据本来就是同一块数据的不同部分，比如说一个文件被分成多个部分发送，这时当然不需要处理粘包现象</li><li>如果多个分组毫不相干，甚至是并列关系，那么这个时候就一定要处理粘包现象了</li></ol><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul><li>固定长度：每次发送固定长度的数据；</li><li>特殊标示：以回车，换行作为特殊标示；获取到指定的标识时，说明包获取完整。</li><li>字节长度：包头+包长+包体的协议形式，当服务器端获取到指定的包长时才说明获取完整；</li></ul><p>代码演示第三种：</p><h3 id="socket服务端"><a href="#socket服务端" class="headerlink" title="socket服务端:"></a>socket服务端:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> socket.socket1.socket5;<br> <br><span class="hljs-keyword">import</span> java.io.DataInputStream;<br> <br><span class="hljs-keyword">import</span> java.io.IOException;<br> <br><span class="hljs-keyword">import</span> java.io.InputStream;<br> <br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br> <br><span class="hljs-keyword">import</span> java.net.Socket;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerSocketTest</span> &#123;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br> <br><span class="hljs-keyword">try</span> &#123;<br> <br><span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br> <br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> serverSocket.accept();<br> <br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> client.getInputStream();<br> <br>                <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dataInputStream</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(inputStream);<br> <br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br> <br>                    <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> dataInputStream.readByte();<br> <br>                    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> dataInputStream.readInt();<br> <br>                    <span class="hljs-type">byte</span>[] data =<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[len -<span class="hljs-number">5</span>];<br> <br>                    dataInputStream.readFully(data);<br> <br>                    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data);<br> <br>                    System.out.println(<span class="hljs-string">&quot;获取的数据类型为：&quot;</span>+b);<br> <br>                    System.out.println(<span class="hljs-string">&quot;获取的数据长度为：&quot;</span>+len);<br> <br>                    System.out.println(<span class="hljs-string">&quot;获取的数据内容为：&quot;</span>+str);<br> <br>                &#125;<br> <br>&#125;<span class="hljs-keyword">catch</span> (IOException e) &#123;<br> <br>e.printStackTrace();<br> <br>        &#125;<br> <br>&#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="socket的客户端："><a href="#socket的客户端：" class="headerlink" title="socket的客户端："></a>socket的客户端：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> socket.socket1.socket5;<br> <br><span class="hljs-keyword">import</span> java.io.*;<br> <br><span class="hljs-keyword">import</span> java.net.Socket;<br> <br><span class="hljs-keyword">import</span> java.util.Scanner;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientSocketTest</span> &#123;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br> <br><span class="hljs-keyword">try</span> &#123;<br> <br><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">9999</span>);<br> <br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br> <br>            <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dataOutputStream</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(outputStream);<br> <br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br> <br>            <span class="hljs-keyword">if</span>(scanner.hasNext())&#123;<br> <br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> scanner.next();<br> <br>                <span class="hljs-type">int</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br> <br>                <span class="hljs-type">byte</span>[] data = str.getBytes();<br> <br>                <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> data.length +<span class="hljs-number">5</span>;<br> <br>                dataOutputStream.writeByte(type);<br> <br>                dataOutputStream.writeInt(len);<br> <br>                dataOutputStream.write(data);<br> <br>                dataOutputStream.flush();<br> <br>            &#125;<br> <br>&#125;<span class="hljs-keyword">catch</span> (IOException e) &#123;<br> <br>e.printStackTrace();<br> <br>        &#125;<br> <br>&#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h1><p>只是socket对tcp的封装</p><h1 id="flush"><a href="#flush" class="headerlink" title="flush"></a>flush</h1><p>在我们使用缓冲区进行写操作时，程序会先把数据读到缓冲区（读到内存里面），每当缓冲区数据进入满载状态时，会对数据进行一次写出。假如最后一次的数据量没有达到让缓冲区进入满载状态，这时候不主动调用flush()方法缓冲区数据将会丢失（没有写入到硬件中）。flush()方法起到强制写出的效果，在调用close()方法前，代用flush()方法，这样能保证数据完整性。</p><h1 id="writeUTF和readUTF"><a href="#writeUTF和readUTF" class="headerlink" title="writeUTF和readUTF"></a>writeUTF和readUTF</h1><p>对方流关闭时close() 再调用read会抛出EOF异常</p><p>对方未关闭流 直接进程停止，会Connection reset</p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Socket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue.js学习笔记终极版</title>
    <link href="/2021/10/06/vue%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/10/06/vue%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>Vue是中国人开发的一款基于JavaScript语言的轻量级前端框架，这是一个前端入门必学的框架之一。本文主要记录一下使用示例。</p><h1 id="API文档"><a href="#API文档" class="headerlink" title="API文档"></a>API文档</h1><p>官网教程：<a href="https://cn.vuejs.org/v2/guide/">https://cn.vuejs.org/v2/guide/</a></p><h1 id="一、Vue模版语法"><a href="#一、Vue模版语法" class="headerlink" title="一、Vue模版语法"></a>一、Vue模版语法</h1><h2 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 插值表达式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 输出hello world! --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;msg+123&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 输出hello world!123 --&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 引入vue.js --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">           <span class="hljs-comment">// el为元素挂载位置，为css选择器或dom元素</span></span><br><span class="language-javascript">           <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">               <span class="hljs-comment">// 模型数据（值为一个对象）</span></span><br><span class="language-javascript">               <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;hello world!&#x27;</span></span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;);</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h2><p>如上插值表达式会出现闪动问题，为解决这一问题，可以使用v-cloak指令：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 加入该样式 */</span></span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-attr">[v-cloak]</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 添加v-cloak --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-cloak</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 输出hello world! --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-cloak</span>&gt;</span>&#123;&#123;msg+123&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 输出hello world!123 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入vue.js --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// el为元素挂载位置，为css选择器或dom元素</span></span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 模型数据（值为一个对象）</span></span><br><span class="language-javascript">                <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;hello world!&#x27;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="v-text-推荐"><a href="#v-text-推荐" class="headerlink" title="v-text(推荐)"></a>v-text(推荐)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 输出和上面一样，且无闪动（推荐） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&#x27;msg&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="v-html-可加入样式"><a href="#v-html-可加入样式" class="headerlink" title="v-html(可加入样式)"></a>v-html(可加入样式)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 有安全隐患 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 添加v-cloak --&gt;</span><br>       <span class="hljs-comment">&lt;!-- 输出hello world! --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-cloak</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 输出和上面一样，且无闪动（推荐） --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&#x27;msg&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 同样输出，但加上了样式 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&#x27;msg1&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 引入vue.js --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">           <span class="hljs-comment">// el为元素挂载位置，为css选择器或dom元素</span></span><br><span class="language-javascript">           <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">               <span class="hljs-comment">// 模型数据（值为一个对象）</span></span><br><span class="language-javascript">               <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;hello world!&#x27;</span>,</span><br><span class="language-javascript">               <span class="hljs-attr">msg1</span>: <span class="hljs-string">&#x27;&lt;h1&gt;hello world!&lt;/h1&gt;&#x27;</span></span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;);</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h2><p> 显示原始信息，跳过编译过程（分析编译过程）</p><h2 id="数据响应式"><a href="#数据响应式" class="headerlink" title="数据响应式"></a>数据响应式</h2><p>如何理解响应式:</p><ul><li><p>html5 中的响应式（屏幕尺寸的变化导致样式的变化）</p></li><li><p>数据的响应式（数据的变化导致页面内容的变化）</p></li></ul><p>什么是数据绑定:</p><ul><li>数据绑定：将数据填充到标签中</li></ul><p>v-once 只编译一次:</p><ul><li>显示内容之后不再具有响应式功能(不会随数据改变而再改变)</li></ul><h2 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-cloak</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- input页面和数据双向绑定，input值变化，上面也会变化 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="MVVM设计思想"><a href="#MVVM设计思想" class="headerlink" title="MVVM设计思想"></a>MVVM设计思想</h2><ul><li>M(model) （数据对象等）</li><li>V(view) （页面显示）</li><li>VM(View Model) （处理M、V之间的关系）</li></ul><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p>v-on指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 点击后进行累加 --&gt;</span><br>       <span class="hljs-comment">&lt;!-- &lt;button v-on:click=&#x27;num++&#x27;&gt;点击&lt;/button&gt; --&gt;</span><br>       <span class="hljs-comment">&lt;!-- 上面语法的简写 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;num++&#x27;</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 引入vue.js --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">           <span class="hljs-comment">// el为元素挂载位置，为css选择器或dom元素</span></span><br><span class="language-javascript">           <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">               <span class="hljs-comment">// 模型数据（值为一个对象）</span></span><br><span class="language-javascript">               <span class="hljs-attr">num</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;);</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>事件函数的调用（两种方式）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 点击后进行累加 --&gt;</span><br>      <span class="hljs-comment">&lt;!-- 第一种方式 --&gt;</span><br>      <span class="hljs-comment">&lt;!-- &lt;button @click=&#x27;add&#x27;&gt;点击&lt;/button&gt; --&gt;</span><br>      <span class="hljs-comment">&lt;!-- 第二种方式 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;add()&#x27;</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 引入vue.js --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// el为元素挂载位置，为css选择器或dom元素</span></span><br><span class="language-javascript">          <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-comment">// 模型数据（值为一个对象）</span></span><br><span class="language-javascript">              <span class="hljs-attr">num</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-attr">add</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                  <span class="hljs-comment">// 需要加this，否则会出错；thia指的是vm实例本身</span></span><br><span class="language-javascript">                  <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span>++;</span><br><span class="language-javascript">              &#125;</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>事件函数参数传递</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&#x27;say(&quot;hi&quot;,$event)&#x27;</span>&gt;</span>Say hi<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-comment">&lt;!-- $event是固定名称，传递该事件到参数 --&gt;</span><br></code></pre></td></tr></table></figure><p>.stop阻止冒泡</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.stop</span>=<span class="hljs-string">&quot;handle&quot;</span>&gt;</span> 跳转 <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>.prevent阻止默认行为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.stop</span>=<span class="hljs-string">&quot;handle&quot;</span>&gt;</span> 跳转 <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>按键修饰符</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 按回车键触发 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-on:keyup.enter</span>=<span class="hljs-string">&#x27;submit&#x27;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 按esc键触发 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-on:keyup.delete</span>=<span class="hljs-string">&#x27;handle&#x27;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h2><p>v-bind 指令用法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- &lt;a v-bind:href=&quot;url&quot;&gt;百度&lt;/a&gt; --&gt;</span><br>       <span class="hljs-comment">&lt;!-- 简写 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 引入vue.js --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">           <span class="hljs-comment">// el为元素挂载位置，为css选择器或dom元素</span></span><br><span class="language-javascript">           <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">               <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;);</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>v-model的低层实现原理分析</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-bind:value</span>=<span class="hljs-string">&quot;msg&quot;</span> <span class="hljs-attr">v-on:input</span>=<span class="hljs-string">&quot;msg=$event.target.value&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="样式绑定"><a href="#样式绑定" class="headerlink" title="样式绑定"></a>样式绑定</h2><h3 id="class绑定"><a href="#class绑定" class="headerlink" title="class绑定"></a>class绑定</h3><p>对象语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&#x27;&#123;active:isActive&#125;&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入vue.js --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// el为元素挂载位置，为css选择器或dom元素</span></span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>数组语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 样式1 */</span></span><br><span class="language-css">        <span class="hljs-selector-class">.active</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* 样式2 */</span></span><br><span class="language-css">        <span class="hljs-selector-class">.error</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: orange;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 数组形式的两个类 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&#x27;[ActiveClass,ErrorClass]&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入vue.js --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// el为元素挂载位置，为css选择器或dom元素</span></span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-title class_">ActiveClass</span>: <span class="hljs-string">&#x27;active&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-title class_">ErrorClass</span>: <span class="hljs-string">&#x27;error&#x27;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>细节优化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html">    <span class="hljs-comment">&lt;!-- 混合使用 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 数组形式的两个类 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&#x27;[ActiveClass,ErrorClass,&#123;text: isTest&#125;]&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 简化方法：&lt;div v-bind:class=&#x27;arrClass&#x27;&gt;&lt;/div&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入vue.js --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// el为元素挂载位置，为css选择器或dom元素</span></span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// arrClass: [&#x27;acrive&#x27;,&#x27;error&#x27;], </span></span><br><span class="language-javascript">                <span class="hljs-title class_">ActiveClass</span>: <span class="hljs-string">&#x27;active&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-title class_">ErrorClass</span>: <span class="hljs-string">&#x27;error&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">isTest</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="style绑定"><a href="#style绑定" class="headerlink" title="style绑定"></a>style绑定</h3><p>对象语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">&quot;&#123; color: activeColor, fontSize: fontSize &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 对activeColor进行赋值，方法如class绑定；也可以用别名代替，再在data中操作 --&gt;</span><br></code></pre></td></tr></table></figure><p>数组语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">&quot;[baseStyles, overridingStyles]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="分支循环结构"><a href="#分支循环结构" class="headerlink" title="分支循环结构"></a>分支循环结构</h2><p>v-if&#x2F;v-else-if&amp;v-show</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 当score&gt;=90时显示优秀 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&#x27;score&gt;=90&#x27;</span>&gt;</span>优秀<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 当score为80~90时显示良好 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&#x27;score&gt;=80&amp;&amp;score&lt;90&#x27;</span>&gt;</span>良好<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 当score为80以下时显示一般 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>=<span class="hljs-string">&#x27;score&lt;80&#x27;</span>&gt;</span>一般<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 当flag为true时显示，为false时隐藏 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&#x27;flag&#x27;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 区别：v-show时，即使隐藏也会存在div(display=none),会渲染；而v-if则不再有div存在，不会渲染到浏览器 --&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">           <span class="hljs-comment">// el为元素挂载位置，为css选择器或dom元素</span></span><br><span class="language-javascript">           <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">               <span class="hljs-attr">score</span>: <span class="hljs-number">95</span>,</span><br><span class="language-javascript">               <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;);</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>v-for</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 显示list的元素，以li形式显示 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;item in list&#x27;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 显示list的元素及下标，以li形式显示 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;(item,index) in list&#x27;</span>&gt;</span>&#123;&#123;item&#125;&#125; + &#x27;------&#x27; +&#123;&#123;index&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p>key 的作用：帮助 Vue 区分不同的元素，从而提高性能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 可以设置一个唯一的值，例如index --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&#x27;item.id&#x27;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;(item,index) in list&#x27;</span>&gt;</span>&#123;&#123;item&#125;&#125; + &#x27; &#x27;------&#x27; &#123;&#123;index&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p>v-for遍历对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;(value, key, index) in object&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>v-if 和 v-for 结合使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&#x27;value==12&#x27;</span> <span class="hljs-attr">v</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&#x27;(value, key, index) in object&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="二、Vue常用特性"><a href="#二、Vue常用特性" class="headerlink" title="二、Vue常用特性"></a>二、Vue常用特性</h1><h2 id="表单基本操作"><a href="#表单基本操作" class="headerlink" title="表单基本操作"></a>表单基本操作</h2><ul><li>获取单选框中的值<ul><li>通过v-model</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">1、 两个单选框需要同时通过v-model 双向绑定 一个值 </span><br><span class="hljs-comment">        2、 每一个单选框必须要有value属性  且value 值不能一样 </span><br><span class="hljs-comment">3、 当某一个单选框选中的时候 v-model  会将当前的 value值 改变 data 中的 数据</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">gender 的值就是选中的值，我们只需要实时监控他的值就可以了</span><br><span class="hljs-comment">--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;male&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;gender&#x27;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;female&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;gender&#x27;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">         <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">             <span class="hljs-comment">// 默认会让当前的 value 值为 2 的单选框选中</span></span><br><span class="language-javascript">                <span class="hljs-attr">gender</span>: <span class="hljs-number">2</span>,  </span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>获取复选框中的值</p><ul><li><p>通过v-model</p></li><li><p>和获取单选框中的值一样</p></li><li><p>复选框 checkbox 这种的组合时 data 中的 hobby 我们要定义成数组 否则无法实现多选</p></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">1、 复选框需要同时通过v-model 双向绑定 一个值 </span><br><span class="hljs-comment">        2、 每一个复选框必须要有value属性  且value 值不能一样 </span><br><span class="hljs-comment">3、 当某一个单选框选中的时候 v-model  会将当前的 value值 改变 data 中的 数据</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">hobby 的值就是选中的值，我们只需要实时监控他的值就可以了</span><br><span class="hljs-comment">--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>爱好：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ball&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;hobby&#x27;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;ball&quot;</span>&gt;</span>篮球<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sing&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;hobby&#x27;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;sing&quot;</span>&gt;</span>唱歌<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;code&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;hobby&#x27;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;code&quot;</span>&gt;</span>写代码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">         <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 默认会让当前的 value 值为 2 和 3 的复选框选中</span></span><br><span class="language-javascript">                <span class="hljs-attr">hobby</span>: [<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>],</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>获取下拉框和文本框中的值</p><ul><li>通过v-model</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>职业：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">1、 需要给select  通过v-model 双向绑定 一个值 </span><br><span class="hljs-comment">            2、 每一个option  必须要有value属性  且value 值不能一样 </span><br><span class="hljs-comment">    3、 当某一个option选中的时候 v-model  会将当前的 value值 改变 data 中的 数据</span><br><span class="hljs-comment">     occupation 的值就是选中的值，我们只需要实时监控他的值就可以了</span><br><span class="hljs-comment">--&gt;</span><br>       <span class="hljs-comment">&lt;!-- multiple  多选 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;occupation&#x27;</span> <span class="hljs-attr">multiple</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>请选择职业...<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>教师<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>软件工程师<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>律师<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- textarea 是 一个双标签   不需要绑定value 属性的  --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;desc&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">         <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 默认会让当前的 value 值为 2 和 3 的下拉框选中</span></span><br><span class="language-javascript">                 <span class="hljs-attr">occupation</span>: [<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>],</span><br><span class="language-javascript">              <span class="hljs-attr">desc</span>: <span class="hljs-string">&#x27;nihao&#x27;</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="表单修饰符"><a href="#表单修饰符" class="headerlink" title="表单修饰符"></a>表单修饰符</h2><ul><li>.number 转换为数值<ul><li>注意点：</li><li>当开始输入非数字的字符串时，因为Vue无法将字符串转换成数值</li><li>所以属性值将实时更新成相同的字符串。即使后面输入数字，也将被视作字符串。</li></ul></li><li>.trim 自动过滤用户输入的首尾空白字符<ul><li>只能去掉首尾的 不能去除中间的空格</li></ul></li><li>.lazy 将input事件切换成change事件<ul><li>.lazy 修饰符延迟了同步更新属性值的时机。即将原本绑定在 input 事件的同步逻辑转变为绑定在 change 事件上</li></ul></li><li>在失去焦点 或者 按下回车键时才更新</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 自动将用户的输入值转为数值类型 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--自动过滤用户输入的首尾空白字符   --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.trim</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 在“change”时而非“input”时更新 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">&quot;msg&quot;</span> &gt;</span><br></code></pre></td></tr></table></figure><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><h3 id="Vue-directive-注册全局指令"><a href="#Vue-directive-注册全局指令" class="headerlink" title="Vue.directive 注册全局指令"></a>Vue.directive 注册全局指令</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">  使用自定义的指令，只需在对用的元素中，加上&#x27;v-&#x27;的前缀形成类似于内部指令&#x27;v-if&#x27;，&#x27;v-text&#x27;的形式。 </span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-focus</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 注意点： </span></span><br><span class="language-javascript"><span class="hljs-comment">//   1、 在自定义指令中  如果以驼峰命名的方式定义 如  Vue.directive(&#x27;focusA&#x27;,function()&#123;&#125;) </span></span><br><span class="language-javascript"><span class="hljs-comment">//   2、 在HTML中使用的时候 只能通过 v-focus-a 来使用 </span></span><br><span class="language-javascript">    </span><br><span class="language-javascript"><span class="hljs-comment">// 注册一个全局自定义指令 v-focus</span></span><br><span class="language-javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="language-javascript">  <span class="hljs-comment">// 当绑定元素插入到 DOM 中。 其中 el为dom元素</span></span><br><span class="language-javascript">  <span class="hljs-attr">inserted</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// 聚焦元素</span></span><br><span class="language-javascript">    el.<span class="hljs-title function_">focus</span>();</span><br><span class="language-javascript"> &#125;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">　　<span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Vue-directive-注册全局指令-带参数"><a href="#Vue-directive-注册全局指令-带参数" class="headerlink" title="Vue.directive 注册全局指令 带参数"></a>Vue.directive 注册全局指令 带参数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-color</span>=<span class="hljs-string">&#x27;msg&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">     自定义指令-带参数</span></span><br><span class="hljs-comment"><span class="language-javascript">     bind - 只调用一次，在指令第一次绑定到元素上时候调用</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">   */</span></span><br><span class="language-javascript">   <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;color&#x27;</span>, &#123;</span><br><span class="language-javascript">     <span class="hljs-comment">// bind声明周期, 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置</span></span><br><span class="language-javascript">     <span class="hljs-comment">// el 为当前自定义指令的DOM元素  </span></span><br><span class="language-javascript">     <span class="hljs-comment">// binding 为自定义的函数形参   通过自定义属性传递过来的值 存在 binding.value 里面</span></span><br><span class="language-javascript">     <span class="hljs-attr">bind</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">el, binding</span>)&#123;</span><br><span class="language-javascript">       <span class="hljs-comment">// 根据指令的参数设置背景色</span></span><br><span class="language-javascript">       <span class="hljs-comment">// console.log(binding.value.color)</span></span><br><span class="language-javascript">       el.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = binding.<span class="hljs-property">value</span>.<span class="hljs-property">color</span>;</span><br><span class="language-javascript">     &#125;</span><br><span class="language-javascript">   &#125;);</span><br><span class="language-javascript">   <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">     <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">     <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">       <span class="hljs-attr">msg</span>: &#123;</span><br><span class="language-javascript">         <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;blue&#x27;</span></span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">     &#125;</span><br><span class="language-javascript">   &#125;);</span><br><span class="language-javascript"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="自定义-局部指令"><a href="#自定义-局部指令" class="headerlink" title="自定义 局部指令"></a>自定义 局部指令</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-color</span>=<span class="hljs-string">&#x27;msg&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-focus</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">     自定义指令-局部指令</span></span><br><span class="hljs-comment"><span class="language-javascript">   */</span></span><br><span class="language-javascript">   <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">     <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">     <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">       <span class="hljs-attr">msg</span>: &#123;</span><br><span class="language-javascript">         <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span></span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">     &#125;,</span><br><span class="language-javascript">    <span class="hljs-comment">//局部指令，需要定义在  directives 的选项</span></span><br><span class="language-javascript">     <span class="hljs-attr">directives</span>: &#123;</span><br><span class="language-javascript">       <span class="hljs-attr">color</span>: &#123;</span><br><span class="language-javascript">         <span class="hljs-attr">bind</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">el, binding</span>)&#123;</span><br><span class="language-javascript">           el.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = binding.<span class="hljs-property">value</span>.<span class="hljs-property">color</span>;</span><br><span class="language-javascript">         &#125;</span><br><span class="language-javascript">       &#125;,</span><br><span class="language-javascript">       <span class="hljs-attr">focus</span>: &#123;</span><br><span class="language-javascript">         <span class="hljs-attr">inserted</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">el</span>) &#123;</span><br><span class="language-javascript">           el.<span class="hljs-title function_">focus</span>();</span><br><span class="language-javascript">         &#125;</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">     &#125;</span><br><span class="language-javascript">   &#125;);</span><br><span class="language-javascript"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p> 计算属性与方法的区别:计算属性是基于依赖进行缓存的，而方法不缓存</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 让模版更加简洁,且会进行缓存，提高性能 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  </span><br><span class="hljs-comment">       当多次调用 reverseString  的时候 </span><br><span class="hljs-comment">       只要里面的 num 值不改变 他会把第一次计算的结果直接返回</span><br><span class="hljs-comment">直到data 中的num值改变 计算属性才会重新发生计算</span><br><span class="hljs-comment">    --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;reverseString&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;reverseString&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 调用methods中的方法的时候  他每次会重新调用 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;reverseMessage()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;reverseMessage()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">     计算属性与方法的区别:计算属性是基于依赖进行缓存的，而方法不缓存</span></span><br><span class="hljs-comment"><span class="language-javascript">   */</span></span><br><span class="language-javascript">   <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">     <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">     <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">       <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;Nihao&#x27;</span>,</span><br><span class="language-javascript">       <span class="hljs-attr">num</span>: <span class="hljs-number">100</span></span><br><span class="language-javascript">     &#125;,</span><br><span class="language-javascript">     <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">       <span class="hljs-attr">reverseMessage</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;methods&#x27;</span>)</span><br><span class="language-javascript">         <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">     &#125;,</span><br><span class="language-javascript">     <span class="hljs-comment">//computed  属性 定义 和 data 已经 methods 平级 </span></span><br><span class="language-javascript">     <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">       <span class="hljs-comment">//  reverseString   这个是我们自己定义的名字 </span></span><br><span class="language-javascript">       <span class="hljs-attr">reverseString</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;computed&#x27;</span>)</span><br><span class="language-javascript">         <span class="hljs-keyword">var</span> total = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">         <span class="hljs-comment">//  当data 中的 num 的值改变的时候  reverseString  会自动发生计算  </span></span><br><span class="language-javascript">         <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span>;i++)&#123;</span><br><span class="language-javascript">           total += i;</span><br><span class="language-javascript">         &#125;</span><br><span class="language-javascript">         <span class="hljs-comment">// 这里一定要有return 否则 调用 reverseString 的 时候无法拿到结果    </span></span><br><span class="language-javascript">         <span class="hljs-keyword">return</span> total;</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">     &#125;</span><br><span class="language-javascript">   &#125;);</span><br><span class="language-javascript"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h2><ul><li>侦听器的应用场景</li></ul><p>​数据变化时执行异步或开销较大的操作。数据一旦发生变化就通知侦听器所绑定方法。</p><ul><li>侦听器的用法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">watch</span>: &#123;<br><span class="hljs-attr">firstName</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>)&#123;<br><span class="hljs-comment">// val表示变化之后的值</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">fullName</span> = val + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span>;<br>&#125;,<br><span class="hljs-attr">lastName</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">fullName</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + val;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><ul><li>过滤器的作用</li></ul><p>​格式化数据，比如将字符串格式化为首字母大写，将日期格式化为指定的格式等。</p><ul><li>自定义过滤器</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>((‘过滤器名称 ’, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-comment">//过滤器业务逻辑</span><br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>过滤器使用</li></ul><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!-- msg使用upper过滤器 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span> | upper&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- msg使用upper过滤器后再用lower过滤器 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span> | upper | lower&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 属性使用过滤器 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">“id</span> | <span class="hljs-attr">formatId</span>&quot;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>局部过滤器</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">filters</span>:&#123;<br><span class="hljs-attr">capitalize</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>)&#123;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>带参数的过滤器</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript">·&lt;div id=<span class="hljs-string">&quot;box&quot;</span>&gt;<br>       &lt;!--<br>filterA 被定义为接收三个参数的过滤器函数。<br> 其中 message 的值作为第一个参数，<br>普通字符串 <span class="hljs-string">&#x27;arg1&#x27;</span> 作为第二个参数，表达式 arg2 的值作为第三个参数。<br>--&gt;<br>       &#123;&#123; message | <span class="hljs-title function_">filterA</span>(<span class="hljs-string">&#x27;arg1&#x27;</span>, <span class="hljs-string">&#x27;arg2&#x27;</span>) &#125;&#125;<br>   &lt;/div&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">// 在过滤器中 第一个参数 对应的是  管道符前面的数据   n  此时对应 message</span></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">// 第2个参数  a 对应 实参  arg1 字符串</span></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">// 第3个参数  b 对应 实参  arg2 字符串</span></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-string">&#x27;filterA&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">n,a,b</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">10</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">               <span class="hljs-keyword">return</span> n+a;</span></span><br><span class="language-javascript"><span class="language-xml">           &#125;<span class="hljs-keyword">else</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">               <span class="hljs-keyword">return</span> n+b;</span></span><br><span class="language-javascript"><span class="language-xml">           &#125;</span></span><br><span class="language-javascript"><span class="language-xml">       &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">       </span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#box&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">data</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">               <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;哈哈哈&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">           &#125;</span></span><br><span class="language-javascript"><span class="language-xml">       &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="三、组件化开发"><a href="#三、组件化开发" class="headerlink" title="三、组件化开发"></a>三、组件化开发</h1><h2 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h2><ul><li>全局组件注册<ul><li>data必须是一个函数而不是一个对象</li><li>组件模板内容必须是单个根元素，即无兄弟元素</li><li>组件模板内容可以是模板字符串（注意驼峰命名不能在普通标签中使用，只能用短横线命名法）</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 组件使用 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 组件注册</span></span><br><span class="language-javascript">       <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;button-counter&#x27;</span>, &#123;</span><br><span class="language-javascript">           <span class="hljs-comment">// 数据函数</span></span><br><span class="language-javascript">           <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                   <span class="hljs-attr">count</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">               &#125;</span><br><span class="language-javascript">           &#125;,</span><br><span class="language-javascript">           <span class="hljs-comment">// 模版</span></span><br><span class="language-javascript">           <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;button @click=&quot;count++&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/button&gt;&#x27;</span></span><br><span class="language-javascript">       &#125;);</span><br><span class="language-javascript">       <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">           <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">               <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;111&#x27;</span></span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;);</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>局部组件注册</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">ComponentA</span> = &#123; <span class="hljs-comment">/* ... */</span> &#125;;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">ComponentB</span> = &#123; <span class="hljs-comment">/* ... */</span> &#125;;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">ComponentC</span> = &#123; <span class="hljs-comment">/* ... */</span> &#125;;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span><br><span class="hljs-attr">components</span>: &#123;<br><span class="hljs-string">&#x27;component-a&#x27;</span>: <span class="hljs-title class_">ComponentA</span>,<br><span class="hljs-string">&#x27;component-b&#x27;</span>: <span class="hljs-title class_">ComponentB</span>,<br><span class="hljs-string">&#x27;component-c&#x27;</span>: <span class="hljs-title class_">ComponentC</span>,<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h2><p>Devtools:<a href="https://github.com/vuejs/devtools">https://github.com/vuejs/devtools</a></p><h2 id="Vue组件之间传值"><a href="#Vue组件之间传值" class="headerlink" title="Vue组件之间传值"></a>Vue组件之间传值</h2><h3 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h3><ul><li>父组件发送的形式是以属性的形式绑定值到子组件身上。</li><li>然后子组件用属性props接收</li><li>在props中使用驼峰形式，模板中需要使用短横线的形式</li><li>字符串形式的模板中没有这个限制</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;pmsg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--1、menu-item  在 APP中嵌套着 故 menu-item   为  子组件      --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 给子组件传入一个静态的值 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">menu-item</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#x27;来自父组件的值&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">menu-item</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 2、 需要动态的数据的时候 需要属性绑定的形式设置 此时 ptitle  来自父组件data 中的数据 . </span><br><span class="hljs-comment">  传的值可以是数字、对象、数组等等</span><br><span class="hljs-comment">--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">menu-item</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&#x27;ptitle&#x27;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&#x27;hello&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">menu-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;menu-item&#x27;</span>, &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 3、 子组件用属性props接收父组件传递过来的数据  </span></span><br><span class="language-javascript">            <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>],</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;子组件本身的数据&#x27;</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;&#123;&#123;msg + &quot;----&quot; + title + &quot;-----&quot; + content&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">pmsg</span>: <span class="hljs-string">&#x27;父组件中内容&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">ptitle</span>: <span class="hljs-string">&#x27;动态绑定属性&#x27;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h3><ul><li>子组件用$emit()触发事件</li><li>$emit() 第一个参数为 自定义的事件名称 第二个参数为需要传递的数据</li><li>父组件用v-on监听子组件的事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&#x27;&#123;fontSize: fontSize + &quot;px&quot;&#125;&#x27;</span>&gt;</span>&#123;&#123;pmsg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 2 父组件用v-on 监听子组件的事件</span><br><span class="hljs-comment">           这里 enlarge-text  是从 $emit 中的第一个参数对应   handle 为对应的事件处理函数</span><br><span class="hljs-comment">       --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">menu-item</span> <span class="hljs-attr">:parr</span>=<span class="hljs-string">&#x27;parr&#x27;</span> @<span class="hljs-attr">enlarge-text</span>=<span class="hljs-string">&#x27;handle($event)&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">menu-item</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">       /*</span></span><br><span class="language-xml"><span class="language-handlebars">                             子组件向父组件传值-携带参数</span></span><br><span class="language-xml"><span class="language-handlebars">                           */</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">       Vue.component(&#x27;menu-item&#x27;, &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">           props: [&#x27;parr&#x27;],</span></span><br><span class="language-xml"><span class="language-handlebars">           template: `</span></span><br><span class="language-xml"><span class="language-handlebars">       <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">         <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">           <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&#x27;index&#x27;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;(item,index) in parr&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">         <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">###  1、子组件用$emit()触发事件</span></span><br><span class="language-xml"><span class="language-handlebars">### 第一个参数为 自定义的事件名称   第二个参数为需要传递的数据  </span></span><br><span class="language-xml"><span class="language-handlebars">         <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;$emit(&quot;enlarge-text&quot;, 5)&#x27;</span>&gt;</span>扩大父组件中字体大小<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">         <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;$emit(&quot;enlarge-text&quot;, 10)&#x27;</span>&gt;</span>扩大父组件中字体大小<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">     `</span></span><br><span class="language-xml"><span class="language-handlebars">       &#125;);</span></span><br><span class="language-xml"><span class="language-handlebars">       var vm = new Vue(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">           el: &#x27;#app&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">           data: &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">               pmsg: &#x27;父组件中内容&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">               parr: [&#x27;apple&#x27;, &#x27;orange&#x27;, &#x27;banana&#x27;],</span></span><br><span class="language-xml"><span class="language-handlebars">               fontSize: 10</span></span><br><span class="language-xml"><span class="language-handlebars">           &#125;,</span></span><br><span class="language-xml"><span class="language-handlebars">           methods: &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">               handle: function(val) &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">                   // 扩大字体大小</span></span><br><span class="language-xml"><span class="language-handlebars">                   this.fontSize += val;</span></span><br><span class="language-xml"><span class="language-handlebars">               &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">           &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">       &#125;);</span></span><br><span class="language-xml"><span class="language-handlebars">   </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="兄弟之间的传递"><a href="#兄弟之间的传递" class="headerlink" title="兄弟之间的传递"></a>兄弟之间的传递</h3><ul><li>兄弟之间传递数据需要借助于事件中心，通过事件中心传递数据<ul><li>提供事件中心 var hub &#x3D; new Vue()</li></ul></li><li>传递数据方，通过一个事件触发hub.$emit(方法名，传递的数据)</li><li>接收数据方，通过mounted(){} 钩子中 触发hub.$on()方法名</li><li>销毁事件 通过hub.$off()方法名销毁之后无法进行传递数据</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>父组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;handle&#x27;</span>&gt;</span>销毁事件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">test-tom</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">test-tom</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">test-jerry</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">test-jerry</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">                               兄弟组件之间数据传递</span></span><br><span class="hljs-comment"><span class="language-javascript">                           */</span></span><br><span class="language-javascript">       <span class="hljs-comment">//1、 提供事件中心</span></span><br><span class="language-javascript">       <span class="hljs-keyword">var</span> hub = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;test-tom&#x27;</span>, &#123;</span><br><span class="language-javascript">           <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                   <span class="hljs-attr">num</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">               &#125;</span><br><span class="language-javascript">           &#125;,</span><br><span class="language-javascript">           <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">                       &lt;div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                       &lt;div&gt;TOM:&#123;&#123;num&#125;&#125;&lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                       &lt;div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                           &lt;button @click=&#x27;handle&#x27;&gt;点击&lt;/button&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                       &lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                       &lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                   `</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">               <span class="hljs-attr">handle</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                   <span class="hljs-comment">//2、传递数据方，通过一个事件触发hub.$emit(方法名，传递的数据)   触发兄弟组件的事件</span></span><br><span class="language-javascript">                   hub.$emit(<span class="hljs-string">&#x27;jerry-event&#x27;</span>, <span class="hljs-number">2</span>);</span><br><span class="language-javascript">               &#125;</span><br><span class="language-javascript">           &#125;,</span><br><span class="language-javascript">           <span class="hljs-attr">mounted</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-comment">// 3、接收数据方，通过mounted()&#123;&#125; 钩子中  触发hub.$on(方法名</span></span><br><span class="language-javascript">               hub.$on(<span class="hljs-string">&#x27;tom-event&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">val</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">                   <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span> += val;</span><br><span class="language-javascript">               &#125;);</span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;);</span><br><span class="language-javascript">       <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;test-jerry&#x27;</span>, &#123;</span><br><span class="language-javascript">           <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                   <span class="hljs-attr">num</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">               &#125;</span><br><span class="language-javascript">           &#125;,</span><br><span class="language-javascript">           <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">                       &lt;div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                       &lt;div&gt;JERRY:&#123;&#123;num&#125;&#125;&lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                       &lt;div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                           &lt;button @click=&#x27;handle&#x27;&gt;点击&lt;/button&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                       &lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                       &lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                   `</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">               <span class="hljs-attr">handle</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                   <span class="hljs-comment">//2、传递数据方，通过一个事件触发hub.$emit(方法名，传递的数据)   触发兄弟组件的事件</span></span><br><span class="language-javascript">                   hub.$emit(<span class="hljs-string">&#x27;tom-event&#x27;</span>, <span class="hljs-number">1</span>);</span><br><span class="language-javascript">               &#125;</span><br><span class="language-javascript">           &#125;,</span><br><span class="language-javascript">           <span class="hljs-attr">mounted</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-comment">// 3、接收数据方，通过mounted()&#123;&#125; 钩子中  触发hub.$on()方法名</span></span><br><span class="language-javascript">               hub.$on(<span class="hljs-string">&#x27;jerry-event&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">val</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">                   <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span> += val;</span><br><span class="language-javascript">               &#125;);</span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;);</span><br><span class="language-javascript">       <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">           <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">           &#125;,</span><br><span class="language-javascript">           <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">               <span class="hljs-attr">handle</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                   <span class="hljs-comment">//4、销毁事件 通过hub.$off()方法名销毁之后无法进行传递数据  </span></span><br><span class="language-javascript">                   hub.$off(<span class="hljs-string">&#x27;tom-event&#x27;</span>);</span><br><span class="language-javascript">                   hub.$off(<span class="hljs-string">&#x27;jerry-event&#x27;</span>);</span><br><span class="language-javascript">               &#125;</span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;);</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="组件插槽"><a href="#组件插槽" class="headerlink" title="组件插槽"></a>组件插槽</h2><h3 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 这里的所有组件标签中嵌套的内容会替换掉slot  如果不传值 则使用 slot 中的默认值  --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">alert-box</span>&gt;</span>有bug发生<span class="hljs-tag">&lt;/<span class="hljs-name">alert-box</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">alert-box</span>&gt;</span>有一个警告<span class="hljs-tag">&lt;/<span class="hljs-name">alert-box</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">alert-box</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">alert-box</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">        /*</span></span><br><span class="language-xml"><span class="language-handlebars">                    组件插槽：父组件向子组件传递内容</span></span><br><span class="language-xml"><span class="language-handlebars">                */</span></span><br><span class="language-xml"><span class="language-handlebars">        Vue.component(&#x27;alert-box&#x27;, &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">            template: `</span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">          <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>ERROR:<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    <span class="hljs-comment">&lt;!-- 当组件渲染的时候，这个 &lt;slot&gt; 元素将会被替换为“组件标签中嵌套的内容”。--&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    <span class="hljs-comment">&lt;!--  插槽内可以包含任何模板代码，包括 HTML --&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">          <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>默认内容<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">      `</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;);</span></span><br><span class="language-xml"><span class="language-handlebars">        var vm = new Vue(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">            el: &#x27;#app&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">            data: &#123;</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">            &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;);</span></span><br><span class="language-xml"><span class="language-handlebars">    </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">base-layout</span>&gt;</span><br>           <span class="hljs-comment">&lt;!-- 2、 通过slot属性来指定, 这个slot的值必须和下面slot组件得name值对应上</span><br><span class="hljs-comment">                   如果没有匹配到 则放到匿名的插槽中   --&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&#x27;header&#x27;</span>&gt;</span>标题信息<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>主要内容1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>主要内容2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&#x27;footer&#x27;</span>&gt;</span>底部信息信息<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">base-layout</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">base-layout</span>&gt;</span><br>           <span class="hljs-comment">&lt;!-- 注意点：template临时的包裹标签最终不会渲染到页面上     --&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&#x27;header&#x27;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>标题信息1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>标题信息2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>主要内容1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>主要内容2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&#x27;footer&#x27;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>底部信息信息1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>底部信息信息2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">base-layout</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">       /*</span></span><br><span class="language-xml"><span class="language-handlebars">                                     具名插槽</span></span><br><span class="language-xml"><span class="language-handlebars">                                   */</span></span><br><span class="language-xml"><span class="language-handlebars">       Vue.component(&#x27;base-layout&#x27;, &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">           template: `</span></span><br><span class="language-xml"><span class="language-handlebars">                   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                   <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                       ###1、 使用 <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span> 中的 &quot;name&quot; 属性绑定元素 指定当前插槽的名字</span></span><br><span class="language-xml"><span class="language-handlebars">                       <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;header&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                   <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                   <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                       <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                   <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                   <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                       ###  注意点： </span></span><br><span class="language-xml"><span class="language-handlebars">                       ###  具名插槽的渲染顺序，完全取决于模板，而不是取决于父组件中元素的顺序</span></span><br><span class="language-xml"><span class="language-handlebars">                       <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;footer&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                   <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">               `</span></span><br><span class="language-xml"><span class="language-handlebars">       &#125;);</span></span><br><span class="language-xml"><span class="language-handlebars">       var vm = new Vue(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">           el: &#x27;#app&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">           data: &#123;</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">           &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">       &#125;);</span></span><br><span class="language-xml"><span class="language-handlebars">   </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><ul><li>父组件对子组件加工处理</li><li>既可以复用子组件的slot，又可以使slot内容不一致</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">           1、当我们希望li 的样式由外部使用组件的地方定义，因为可能有多种地方要使用该组件，</span><br><span class="hljs-comment">           但样式希望不一样 这个时候我们需要使用作用域插槽 </span><br><span class="hljs-comment">           </span><br><span class="hljs-comment">       --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">fruit-list</span> <span class="hljs-attr">:list</span>=<span class="hljs-string">&#x27;list&#x27;</span>&gt;</span><br>           <span class="hljs-comment">&lt;!-- 2、 父组件中使用了&lt;template&gt;元素,而且包含scope=&quot;slotProps&quot;,</span><br><span class="hljs-comment">               slotProps在这里只是临时变量   </span><br><span class="hljs-comment">           ---&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&#x27;slotProps&#x27;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">strong</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&#x27;slotProps.info.id==3&#x27;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;current&quot;</span>&gt;</span><br>               &#123;&#123;slotProps.info.name&#125;&#125;         <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-else</span>&gt;</span>&#123;&#123;slotProps.info.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">fruit-list</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">       /*</span></span><br><span class="language-xml"><span class="language-handlebars">                                     作用域插槽</span></span><br><span class="language-xml"><span class="language-handlebars">                                   */</span></span><br><span class="language-xml"><span class="language-handlebars">       Vue.component(&#x27;fruit-list&#x27;, &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">           props: [&#x27;list&#x27;],</span></span><br><span class="language-xml"><span class="language-handlebars">           template: `</span></span><br><span class="language-xml"><span class="language-handlebars">                   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                   <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&#x27;item.id&#x27;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;item in list&#x27;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                       <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:info</span>=<span class="hljs-string">&#x27;item&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.name</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                   <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">               `</span></span><br><span class="language-xml"><span class="language-handlebars">       &#125;);</span></span><br><span class="language-xml"><span class="language-handlebars">       var vm = new Vue(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">           el: &#x27;#app&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">           data: &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">               list: [&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">                   id: 1,</span></span><br><span class="language-xml"><span class="language-handlebars">                   name: &#x27;apple&#x27;</span></span><br><span class="language-xml"><span class="language-handlebars">               &#125;, &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">                   id: 2,</span></span><br><span class="language-xml"><span class="language-handlebars">                   name: &#x27;orange&#x27;</span></span><br><span class="language-xml"><span class="language-handlebars">               &#125;, &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">                   id: 3,</span></span><br><span class="language-xml"><span class="language-handlebars">                   name: &#x27;banana&#x27;</span></span><br><span class="language-xml"><span class="language-handlebars">               &#125;]</span></span><br><span class="language-xml"><span class="language-handlebars">           &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">       &#125;);</span></span><br><span class="language-xml"><span class="language-handlebars">   </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="四、Vue前端交互"><a href="#四、Vue前端交互" class="headerlink" title="四、Vue前端交互"></a>四、Vue前端交互</h1><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><ul><li>主要解决异步深层嵌套的问题</li><li>promise 提供了简洁的API 使得异步操作更加容易</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve,reject</span>)&#123;<br><span class="hljs-comment">// 成功时调用resolve</span><br><span class="hljs-comment">// 失败时调用reject</span><br>&#125;);<br>p.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">ret</span>)&#123;<br><span class="hljs-comment">// 从resolve得到正常结果</span><br>&#125;，<span class="hljs-keyword">function</span>(<span class="hljs-params">ret</span>)&#123;<br><span class="hljs-comment">// 从reject得到错误消息</span><br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="基于Promise发送Ajax请求"><a href="#基于Promise发送Ajax请求" class="headerlink" title="基于Promise发送Ajax请求"></a>基于Promise发送Ajax请求</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>   /*<br>     基于Promise发送Ajax请求<br>   */<br>   function queryData(url) &#123;<br>    #   1.1 创建一个Promise实例<br>     var p = new Promise(function(resolve, reject)&#123;<br>       var xhr = new XMLHttpRequest();<br>       xhr.onreadystatechange = function()&#123;<br>         if(xhr.readyState != 4) return;<br>         if(xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;<br>           # 1.2 处理正常的情况<br>           resolve(xhr.responseText);<br>         &#125;else&#123;<br>           # 1.3 处理异常情况<br>           reject(&#x27;服务器错误&#x27;);<br>         &#125;<br>       &#125;;<br>       xhr.open(&#x27;get&#x27;, url);<br>       xhr.send(null);<br>     &#125;);<br>     return p;<br>   &#125;<br># 注意：  这里需要开启一个服务 <br>   # 在then方法中，你也可以直接return数据而不是Promise对象，在后面的then中就可以接收到数据了<br>   queryData(&#x27;http://localhost:3000/data&#x27;)<br>     .then(function(data)&#123;<br>       console.log(data)<br>       #  1.4 想要继续链式编程下去 需要 return  <br>       return queryData(&#x27;http://localhost:3000/data1&#x27;);<br>     &#125;)<br>     .then(function(data)&#123;<br>       console.log(data);<br>       return queryData(&#x27;http://localhost:3000/data2&#x27;);<br>     &#125;)<br>     .then(function(data)&#123;<br>       console.log(data)<br>     &#125;);<br> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Promise-基本API"><a href="#Promise-基本API" class="headerlink" title="Promise 基本API"></a>Promise 基本API</h3><p><strong>实例方法</strong></p><p><strong>.then()</strong></p><p>​得到异步任务正确的结果</p><p><strong>.catch()</strong></p><p>​获取异常信息</p><p><strong>.finally()</strong></p><p>​成功与否都会执行（不是正式标准）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">      Promise常用API-实例方法</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-comment">// console.dir(Promise);</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>          <span class="hljs-comment">// resolve(123);</span><br>          <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>        &#125;, <span class="hljs-number">100</span>);<br>      &#125;)<br>    &#125;<br>    <span class="hljs-comment">// foo()</span><br>    <span class="hljs-comment">//   .then(function(data)&#123;</span><br>    <span class="hljs-comment">//     console.log(data)</span><br>    <span class="hljs-comment">//   &#125;)</span><br>    <span class="hljs-comment">//   .catch(function(data)&#123;</span><br>    <span class="hljs-comment">//     console.log(data)</span><br>    <span class="hljs-comment">//   &#125;)</span><br>    <span class="hljs-comment">//   .finally(function()&#123;</span><br>    <span class="hljs-comment">//     console.log(&#x27;finished&#x27;)</span><br>    <span class="hljs-comment">//   &#125;);</span><br><br>    <span class="hljs-comment">// --------------------------</span><br>    <span class="hljs-comment">// 两种写法是等效的</span><br>    <span class="hljs-title function_">foo</span>()<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>        # 得到异步任务正确的结果<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>      &#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>        # 获取异常信息<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>      &#125;)<br>      # 成功与否都会执行（不是正式标准） <br>      .<span class="hljs-title function_">finally</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;finished&#x27;</span>)<br>      &#125;);<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p><strong>.all()</strong></p><p>​Promise.all方法接受一个数组作参数，数组中的对象（p1、p2、p3）均为promise实例（如果不是一个promise，该项会被用Promise.resolve转换为一个promise)。它的状态由这三个promise实例决定</p><p><strong>.race()</strong></p><p>​Promise.race方法同样接受一个数组作参数。当p1, p2, p3中有一个实例的状态发生改变（变为fulfilled或rejected），p的状态就跟着改变。并把第一个改变状态的promise的返回值，传给p的回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>   <span class="hljs-comment">/*</span><br><span class="hljs-comment">     Promise常用API-对象方法</span><br><span class="hljs-comment">   */</span><br>   <span class="hljs-comment">// console.dir(Promise)</span><br>   <span class="hljs-keyword">function</span> <span class="hljs-title function_">queryData</span>(<span class="hljs-params">url</span>) &#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)&#123;<br>       <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>       xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>         <span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">readyState</span> != <span class="hljs-number">4</span>) <span class="hljs-keyword">return</span>;<br>         <span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span> &amp;&amp; xhr.<span class="hljs-property">status</span> == <span class="hljs-number">200</span>) &#123;<br>           <span class="hljs-comment">// 处理正常的情况</span><br>           <span class="hljs-title function_">resolve</span>(xhr.<span class="hljs-property">responseText</span>);<br>         &#125;<span class="hljs-keyword">else</span>&#123;<br>           <span class="hljs-comment">// 处理异常情况</span><br>           <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;服务器错误&#x27;</span>);<br>         &#125;<br>       &#125;;<br>       xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;get&#x27;</span>, url);<br>       xhr.<span class="hljs-title function_">send</span>(<span class="hljs-literal">null</span>);<br>     &#125;);<br>   &#125;<br><br>   <span class="hljs-keyword">var</span> p1 = <span class="hljs-title function_">queryData</span>(<span class="hljs-string">&#x27;http://localhost:3000/a1&#x27;</span>);<br>   <span class="hljs-keyword">var</span> p2 = <span class="hljs-title function_">queryData</span>(<span class="hljs-string">&#x27;http://localhost:3000/a2&#x27;</span>);<br>   <span class="hljs-keyword">var</span> p3 = <span class="hljs-title function_">queryData</span>(<span class="hljs-string">&#x27;http://localhost:3000/a3&#x27;</span>);<br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([p1,p2,p3]).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">result</span>)&#123;<br>      <span class="hljs-comment">//   all 中的参数  [p1,p2,p3]   和 返回的结果一 一对应[&quot;HELLO TOM&quot;, &quot;HELLO JERRY&quot;, &quot;HELLO SPIKE&quot;]</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result) <span class="hljs-comment">//[&quot;HELLO TOM&quot;, &quot;HELLO JERRY&quot;, &quot;HELLO SPIKE&quot;]</span><br>    &#125;)<br>   <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>([p1,p2,p3]).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">result</span>)&#123;<br>     <span class="hljs-comment">// 由于p1执行较快，Promise的then()将获得结果&#x27;P1&#x27;。p2,p3仍在继续执行，但执行结果将被丢弃。</span><br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result) <span class="hljs-comment">// &quot;HELLO TOM&quot;</span><br>   &#125;)<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><ul><li>Fetch API是新的ajax解决方案 Fetch会返回Promise</li><li>fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象。</li><li>fetch(url, options).then(）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">    Fetch API 基本用法</span></span><br><span class="hljs-comment"><span class="language-javascript">    fetch(url).then()</span></span><br><span class="hljs-comment"><span class="language-javascript">   第一个参数请求的路径   Fetch会返回Promise   所以我们可以使用then 拿到请求成功的结果 </span></span><br><span class="hljs-comment"><span class="language-javascript">  */</span></span><br><span class="language-javascript">  <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://localhost:3000/fdata&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// text()方法属于fetchAPI的一部分，它返回一个Promise实例对象，用于获取后台返回的数据</span></span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> data.<span class="hljs-title function_">text</span>();</span><br><span class="language-javascript">  &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-comment">//   在这个then里面我们能拿到最终的数据  </span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="fetch-API-中的-HTTP-请求"><a href="#fetch-API-中的-HTTP-请求" class="headerlink" title="fetch API 中的 HTTP 请求"></a>fetch API 中的 HTTP 请求</h3><ul><li>fetch(url, options).then(）</li><li>HTTP协议，它给我们提供了很多的方法，如POST，GET，DELETE，UPDATE，PATCH和PUT<ul><li>默认的是 GET 请求</li><li>需要在 options 对象中 指定对应的 method method:请求使用的方法</li><li>post 和 普通 请求的时候 需要在options 中 设置 请求头 headers 和 body</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>     /*<br>           Fetch API 调用接口传递参数<br>     */<br>    #1.1 GET参数传递 - 传统URL  通过url  ？ 的形式传参 <br>     fetch(&#x27;http://localhost:3000/books?id=123&#x27;, &#123;<br>         # get 请求可以省略不写 默认的是GET <br>             method: &#x27;get&#x27;<br>         &#125;)<br>         .then(function(data) &#123;<br>         # 它返回一个Promise实例对象，用于获取后台返回的数据<br>             return data.text();<br>         &#125;).then(function(data) &#123;<br>         # 在这个then里面我们能拿到最终的数据  <br>             console.log(data)<br>         &#125;);<br><br>   #1.2  GET参数传递  restful形式的URL  通过/ 的形式传递参数  即  id = 456 和id后台的配置有关   <br>     fetch(&#x27;http://localhost:3000/books/456&#x27;, &#123;<br>         # get 请求可以省略不写 默认的是GET <br>             method: &#x27;get&#x27;<br>         &#125;)<br>         .then(function(data) &#123;<br>             return data.text();<br>         &#125;).then(function(data) &#123;<br>             console.log(data)<br>         &#125;);<br><br>    #2.1  DELETE请求方式参数传递      删除id  是  id=789<br>     fetch(&#x27;http://localhost:3000/books/789&#x27;, &#123;<br>             method: &#x27;delete&#x27;<br>         &#125;)<br>         .then(function(data) &#123;<br>             return data.text();<br>         &#125;).then(function(data) &#123;<br>             console.log(data)<br>         &#125;);<br><br>    #3 POST请求传参<br>     fetch(&#x27;http://localhost:3000/books&#x27;, &#123;<br>             method: &#x27;post&#x27;,<br>         # 3.1  传递数据 <br>             body: &#x27;uname=lisi&amp;pwd=123&#x27;,<br>         #  3.2  设置请求头 <br>             headers: &#123;<br>                 &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;<br>             &#125;<br>         &#125;)<br>         .then(function(data) &#123;<br>             return data.text();<br>         &#125;).then(function(data) &#123;<br>             console.log(data)<br>         &#125;);<br><br>    # POST请求传参<br>     fetch(&#x27;http://localhost:3000/books&#x27;, &#123;<br>             method: &#x27;post&#x27;,<br>             body: JSON.stringify(&#123;<br>                 uname: &#x27;张三&#x27;,<br>                 pwd: &#x27;456&#x27;<br>             &#125;),<br>             headers: &#123;<br>                 &#x27;Content-Type&#x27;: &#x27;application/json&#x27;<br>             &#125;<br>         &#125;)<br>         .then(function(data) &#123;<br>             return data.text();<br>         &#125;).then(function(data) &#123;<br>             console.log(data)<br>         &#125;);<br><br>     # PUT请求传参     修改id 是 123 的 <br>     fetch(&#x27;http://localhost:3000/books/123&#x27;, &#123;<br>             method: &#x27;put&#x27;,<br>             body: JSON.stringify(&#123;<br>                 uname: &#x27;张三&#x27;,<br>                 pwd: &#x27;789&#x27;<br>             &#125;),<br>             headers: &#123;<br>                 &#x27;Content-Type&#x27;: &#x27;application/json&#x27;<br>             &#125;<br>         &#125;)<br>         .then(function(data) &#123;<br>             return data.text();<br>         &#125;).then(function(data) &#123;<br>             console.log(data)<br>         &#125;);<br> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="fetchAPI-中-响应格式"><a href="#fetchAPI-中-响应格式" class="headerlink" title="fetchAPI 中 响应格式"></a>fetchAPI 中 响应格式</h3><p>用fetch来获取数据，如果响应正常返回，我们首先看到的是一个response对象，其中包括返回的一堆原始字节，这些字节需要在收到后，需要我们通过调用方法将其转换为相应格式的数据，比如JSON，BLOB或者TEXT等等。</p><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><ul><li>基于promise用于浏览器和node.js的http客户端</li><li>支持浏览器和node.js</li><li>支持promise</li><li>能拦截请求和响应</li><li>自动转换JSON数据</li><li>能转换请求和响应数据</li></ul><h3 id="axios基础用法"><a href="#axios基础用法" class="headerlink" title="axios基础用法"></a>axios基础用法</h3><ul><li>get和 delete请求传递参数<ul><li>通过传统的url 以 ? 的形式传递参数</li><li>restful 形式传递参数</li><li>通过params 形式传递参数</li></ul></li><li>post 和 put 请求传递参数<ul><li>通过选项传递参数</li><li>通过 URLSearchParams 传递参数</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs js">   # <span class="hljs-number">1.</span> 发送get 请求 <br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://localhost:3000/adata&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">ret</span>)&#123; <br>     #  拿到 ret 是一个对象      所有的对象都存在 ret 的data 属性里面<br>     <span class="hljs-comment">// 注意data属性是固定的用法，用于获取后台的实际数据</span><br>     <span class="hljs-comment">// console.log(ret.data)</span><br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret)<br>   &#125;)<br># <span class="hljs-number">2.</span>  get 请求传递参数<br>   # <span class="hljs-number">2.1</span>  通过传统的url  以 ? 的形式传递参数<br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://localhost:3000/axios?id=123&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">ret</span>)&#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret.<span class="hljs-property">data</span>)<br>   &#125;)<br>   # <span class="hljs-number">2.2</span>  restful 形式传递参数 <br>   axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://localhost:3000/axios/123&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">ret</span>)&#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret.<span class="hljs-property">data</span>)<br>   &#125;)<br># <span class="hljs-number">2.3</span>  通过params  形式传递参数 <br>   axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://localhost:3000/axios&#x27;</span>, &#123;<br>     <span class="hljs-attr">params</span>: &#123;<br>       <span class="hljs-attr">id</span>: <span class="hljs-number">789</span><br>     &#125;<br>   &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">ret</span>)&#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret.<span class="hljs-property">data</span>)<br>   &#125;)<br>#<span class="hljs-number">3</span> axios <span class="hljs-keyword">delete</span> 请求传参     传参的形式和 get 请求一样<br>   axios.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;http://localhost:3000/axios&#x27;</span>, &#123;<br>     <span class="hljs-attr">params</span>: &#123;<br>       <span class="hljs-attr">id</span>: <span class="hljs-number">111</span><br>     &#125;<br>   &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">ret</span>)&#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret.<span class="hljs-property">data</span>)<br>   &#125;)<br><br># <span class="hljs-number">4</span>  axios 的 post 请求<br>   # <span class="hljs-number">4.1</span>  通过选项传递参数<br>   axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;http://localhost:3000/axios&#x27;</span>, &#123;<br>     <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;lisi&#x27;</span>,<br>     <span class="hljs-attr">pwd</span>: <span class="hljs-number">123</span><br>   &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">ret</span>)&#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret.<span class="hljs-property">data</span>)<br>   &#125;)<br># <span class="hljs-number">4.2</span>  通过 <span class="hljs-title class_">URLSearchParams</span>  传递参数 <br>   <span class="hljs-keyword">var</span> params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>();<br>   params.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;uname&#x27;</span>, <span class="hljs-string">&#x27;zhangsan&#x27;</span>);<br>   params.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;pwd&#x27;</span>, <span class="hljs-string">&#x27;111&#x27;</span>);<br>   axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;http://localhost:3000/axios&#x27;</span>, params).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">ret</span>)&#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret.<span class="hljs-property">data</span>)<br>   &#125;)<br><br>#<span class="hljs-number">5</span>  axios put 请求传参   和 post 请求一样 <br>   axios.<span class="hljs-title function_">put</span>(<span class="hljs-string">&#x27;http://localhost:3000/axios/123&#x27;</span>, &#123;<br>     <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;lisi&#x27;</span>,<br>     <span class="hljs-attr">pwd</span>: <span class="hljs-number">123</span><br>   &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">ret</span>)&#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret.<span class="hljs-property">data</span>)<br>   &#125;)<br><br></code></pre></td></tr></table></figure><h3 id="axios全局配置"><a href="#axios全局配置" class="headerlink" title="axios全局配置"></a>axios全局配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">#  配置公共的请求头 <br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">baseURL</span> = <span class="hljs-string">&#x27;https://api.example.com&#x27;</span>;<br>#  配置 超时时间<br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">timeout</span> = <span class="hljs-number">2500</span>;<br>#  配置公共的请求头<br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">headers</span>.<span class="hljs-property">common</span>[<span class="hljs-string">&#x27;Authorization&#x27;</span>] = <span class="hljs-variable constant_">AUTH_TOKEN</span>;<br># 配置公共的 post 的 <span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Type</span><br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">headers</span>.<span class="hljs-property">post</span>[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="axios拦截器"><a href="#axios拦截器" class="headerlink" title="axios拦截器"></a>axios拦截器</h3><p><strong>请求拦截器</strong></p><p>​请求拦截器的作用是在请求发送前进行一些操作</p><p>​例如在每个请求体里加上token，统一做了处理如果以后要改也非常容易</p><p><strong>响应拦截器</strong></p><p>​响应拦截器的作用是在接收到响应后进行一些操作</p><p>​例如在服务器返回登录状态失效，需要重新登录的时候，跳转到登录页</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"># <span class="hljs-number">1.</span> 请求拦截器 <br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">config</span>) &#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(config.<span class="hljs-property">url</span>)<br>     # <span class="hljs-number">1.1</span>  任何请求都会经过这一步   在发送请求之前做些什么   <br>     config.<span class="hljs-property">headers</span>.<span class="hljs-property">mytoken</span> = <span class="hljs-string">&#x27;nihao&#x27;</span>;<br>     # <span class="hljs-number">1.2</span>  这里一定要<span class="hljs-keyword">return</span>   否则配置不成功  <br>     <span class="hljs-keyword">return</span> config;<br>   &#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)&#123;<br>      #<span class="hljs-number">1.3</span> 对请求错误做点什么    <br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>   &#125;)<br>#<span class="hljs-number">2.</span> 响应拦截器 <br>   axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br>     #<span class="hljs-number">2.1</span>  在接收响应做些什么  <br>     <span class="hljs-keyword">var</span> data = res.<span class="hljs-property">data</span>;<br>     <span class="hljs-keyword">return</span> data;<br>   &#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)&#123;<br>     #<span class="hljs-number">2.2</span> 对响应错误做点什么  <br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>   &#125;)<br></code></pre></td></tr></table></figure><h2 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async 和 await"></a>async 和 await</h2><ul><li>async作为一个关键字放到函数前面</li><li>任何一个async函数都会隐式返回一个promise</li><li>await关键字只能在使用async定义的函数中使用</li><li>await后面可以直接跟一个 Promise实例对象</li><li>await函数不能单独使用</li><li><strong>async&#x2F;await 让异步代码看起来、表现起来更像同步代码</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"># <span class="hljs-number">1.</span>  <span class="hljs-keyword">async</span> 基础用法<br>   # <span class="hljs-number">1.1</span> <span class="hljs-keyword">async</span>作为一个关键字放到函数前面<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">queryData</span>(<span class="hljs-params"></span>) &#123;<br>     # <span class="hljs-number">1.2</span> <span class="hljs-keyword">await</span>关键字只能在使用<span class="hljs-keyword">async</span>定义的函数中使用      <span class="hljs-keyword">await</span>后面可以直接跟一个 <span class="hljs-title class_">Promise</span>实例对象<br>     <span class="hljs-keyword">var</span> ret = <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)&#123;<br>       <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>         <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;nihao&#x27;</span>)<br>       &#125;,<span class="hljs-number">1000</span>);<br>     &#125;)<br>     <span class="hljs-comment">// console.log(ret.data)</span><br>     <span class="hljs-keyword">return</span> ret;<br>   &#125;<br># <span class="hljs-number">1.3</span> 任何一个<span class="hljs-keyword">async</span>函数都会隐式返回一个promise   我们可以使用then 进行链式编程<br>   <span class="hljs-title function_">queryData</span>().<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>   &#125;)<br><br>#<span class="hljs-number">2.</span>  <span class="hljs-keyword">async</span>    函数处理多个异步函数<br>   axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">baseURL</span> = <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span>;<br><br>   <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">queryData</span>(<span class="hljs-params"></span>) &#123;<br>     # <span class="hljs-number">2.1</span>  添加<span class="hljs-keyword">await</span>之后 当前的<span class="hljs-keyword">await</span> 返回结果之后才会执行后面的代码   <br>     <br>     <span class="hljs-keyword">var</span> info = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;async1&#x27;</span>);<br>     #<span class="hljs-number">2.2</span>  让异步代码看起来、表现起来更像同步代码<br>     <span class="hljs-keyword">var</span> ret = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;async2?info=&#x27;</span> + info.<span class="hljs-property">data</span>);<br>     <span class="hljs-keyword">return</span> ret.<span class="hljs-property">data</span>;<br>   &#125;<br><br>   <span class="hljs-title function_">queryData</span>().<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>   &#125;)<br></code></pre></td></tr></table></figure><h1 id="五、Vue前端路由"><a href="#五、Vue前端路由" class="headerlink" title="五、Vue前端路由"></a>五、Vue前端路由</h1><h2 id="路由的概念"><a href="#路由的概念" class="headerlink" title="路由的概念"></a>路由的概念</h2><p> 路由的本质就是一种对应关系，比如说我们在url地址中输入我们要访问的url地址之后，浏览器要去请求这个url地址对应的资源。</p><p>那么url地址和真实的资源之间就有一种对应的关系，就是路由。</p><ul><li>后端路由是由服务器端进行实现，并完成资源的分发</li><li>前端路由是依靠hash值(锚链接)的变化进行实现</li><li>前端路由的基本概念：根据不同的事件来显示不同的页面内容，即事件与事件处理函数之间的对应关系</li></ul><h2 id="前端路由的初体验"><a href="#前端路由的初体验" class="headerlink" title="前端路由的初体验"></a>前端路由的初体验</h2><p> 前端路由是基于hash值的变化进行实现的（比如点击页面中的菜单或者按钮改变URL的hash值，根据hash值的变化来控制组件的切换）核心实现依靠一个事件，即监听hash值变化的事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onhashchange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//location.hash可以获取到最新的hash值</span><br>    location.<span class="hljs-property">hash</span><br>&#125;<br></code></pre></td></tr></table></figure><p>前端路由实现tab栏切换（案例）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 被 vue 实例控制的 div 区域 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 切换组件的超链接 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/zhuye&quot;</span>&gt;</span>主页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/keji&quot;</span>&gt;</span>科技<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/caijing&quot;</span>&gt;</span>财经<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/yule&quot;</span>&gt;</span>娱乐<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!-- 根据 :is 属性指定的组件名称，把对应的组件渲染到 component 标签所在的位置 --&gt;</span><br>       <span class="hljs-comment">&lt;!-- 可以把 component 标签当做是【组件的占位符】 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;comName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// #region 定义需要被切换的 4 个组件</span></span><br><span class="language-javascript">       <span class="hljs-comment">// 主页组件</span></span><br><span class="language-javascript">       <span class="hljs-keyword">const</span> zhuye = &#123;</span><br><span class="language-javascript">           <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;主页信息&lt;/h1&gt;&#x27;</span></span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 科技组件</span></span><br><span class="language-javascript">       <span class="hljs-keyword">const</span> keji = &#123;</span><br><span class="language-javascript">           <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;科技信息&lt;/h1&gt;&#x27;</span></span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 财经组件</span></span><br><span class="language-javascript">       <span class="hljs-keyword">const</span> caijing = &#123;</span><br><span class="language-javascript">           <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;财经信息&lt;/h1&gt;&#x27;</span></span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 娱乐组件</span></span><br><span class="language-javascript">       <span class="hljs-keyword">const</span> yule = &#123;</span><br><span class="language-javascript">               <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;娱乐信息&lt;/h1&gt;&#x27;</span></span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">           <span class="hljs-comment">// #endregion</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// #region vue 实例对象</span></span><br><span class="language-javascript">       <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">               <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">               <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                   <span class="hljs-attr">comName</span>: <span class="hljs-string">&#x27;zhuye&#x27;</span></span><br><span class="language-javascript">               &#125;,</span><br><span class="language-javascript">               <span class="hljs-comment">// 注册私有组件</span></span><br><span class="language-javascript">               <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">                   zhuye,</span><br><span class="language-javascript">                   keji,</span><br><span class="language-javascript">                   caijing,</span><br><span class="language-javascript">                   yule</span><br><span class="language-javascript">               &#125;</span><br><span class="language-javascript">           &#125;)</span><br><span class="language-javascript">           <span class="hljs-comment">// #endregion</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 监听 window 的 onhashchange 事件，根据获取到的最新的 hash 值，切换要显示的组件的名称</span></span><br><span class="language-javascript">       <span class="hljs-variable language_">window</span>.<span class="hljs-property">onhashchange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">           <span class="hljs-comment">// 通过 location.hash 获取到最新的 hash 值</span></span><br><span class="language-javascript">           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(location.<span class="hljs-property">hash</span>);</span><br><span class="language-javascript">           <span class="hljs-keyword">switch</span> (location.<span class="hljs-property">hash</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)) &#123;</span><br><span class="language-javascript">               <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/zhuye&#x27;</span>:</span><br><span class="language-javascript">                   vm.<span class="hljs-property">comName</span> = <span class="hljs-string">&#x27;zhuye&#x27;</span></span><br><span class="language-javascript">                   <span class="hljs-keyword">break</span></span><br><span class="language-javascript">               <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/keji&#x27;</span>:</span><br><span class="language-javascript">                   vm.<span class="hljs-property">comName</span> = <span class="hljs-string">&#x27;keji&#x27;</span></span><br><span class="language-javascript">                   <span class="hljs-keyword">break</span></span><br><span class="language-javascript">               <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/caijing&#x27;</span>:</span><br><span class="language-javascript">                   vm.<span class="hljs-property">comName</span> = <span class="hljs-string">&#x27;caijing&#x27;</span></span><br><span class="language-javascript">                   <span class="hljs-keyword">break</span></span><br><span class="language-javascript">               <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/yule&#x27;</span>:</span><br><span class="language-javascript">                   vm.<span class="hljs-property">comName</span> = <span class="hljs-string">&#x27;yule&#x27;</span></span><br><span class="language-javascript">                   <span class="hljs-keyword">break</span></span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue Router"></a>Vue Router</h2><p> 它是一个Vue.js官方提供的路由管理器。是一个功能更加强大的前端路由器，推荐使用。Vue Router和Vue.js非常契合，可以一起方便的实现SPA(single page web application,单页应用程序)应用程序的开发。Vue Router依赖于Vue，所以需要先引入Vue，再引入Vue Router.</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li>导入js文件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue-router.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>添加路由链接，<router-link>是路由中提供的标签，默认会被渲染为a标签，to属性默认被渲染为href属性，to属性的值会被渲染为#开头的hash地址。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;router-link to=<span class="hljs-string">&quot;/user&quot;</span>&gt;<span class="hljs-title class_">User</span>&lt;/router-link&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/register&quot;</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>添加路由填充位（路由占位符）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;router-view&gt;&lt;/router-view&gt;<br></code></pre></td></tr></table></figure><ul><li>定义路由组件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">User</span> = &#123;<br><span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;User组件&lt;/h1&gt;&#x27;</span><br>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Register</span> = &#123;<br><span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;Register组件&lt;/h1&gt;&#x27;</span><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>配置路由规则并创建路由实例</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br><span class="hljs-comment">// 所有路由规则</span><br><span class="hljs-attr">routes</span>: [&#123;<br><span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br><span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span><br>&#125;, &#123;<br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/register&#x27;</span>,<br><span class="hljs-attr">component</span>: <span class="hljs-title class_">Register</span><br>&#125;]<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>将路由挂载到Vue实例中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123;&#125;,<br>    <span class="hljs-comment">// 挂载路由实例对象</span><br>    <span class="hljs-attr">router</span>: router<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>总体代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue-router.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 被 vue 实例控制的 div 区域 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/user&quot;</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/register&quot;</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 路由占位符 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 定义两个组件</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> <span class="hljs-title class_">User</span> = &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;User组件&lt;/h1&gt;&#x27;</span></span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> <span class="hljs-title class_">Register</span> = &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;Register组件&lt;/h1&gt;&#x27;</span></span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        <span class="hljs-comment">// 创建路由实例对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 所有路由规则</span></span><br><span class="language-javascript">            <span class="hljs-attr">routes</span>: [&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span></span><br><span class="language-javascript">            &#125;, &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/register&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">component</span>: <span class="hljs-title class_">Register</span></span><br><span class="language-javascript">            &#125;]</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;&#125;,</span><br><span class="language-javascript">            <span class="hljs-comment">// 挂载路由实例对象</span></span><br><span class="language-javascript">            <span class="hljs-attr">router</span>: router</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h3><p> 在路由规则中添加一条路由规则即可，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>    <span class="hljs-comment">// 所有路由规则</span><br>    <span class="hljs-attr">routes</span>: [&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/user&quot;</span><br>    &#125;, &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span><br>    &#125;, &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/register&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Register</span><br>&#125;]<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue-router.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 被 vue 实例控制的 div 区域 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/user&quot;</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/register&quot;</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        // 定义两个组件</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        const User = &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>User组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&#x27;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        // 嵌套路由</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        const Register = &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            template: `<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Register组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/register/tab1&quot;</span>&gt;</span>tab1组件<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/register/tab2&quot;</span>&gt;</span>tab2组件<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-comment">&lt;!-- 子路由组件将会在router-view中显示 --&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        const tab1 = &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            template: `</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>tab1组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>`</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        const tab2 = &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            template: `</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>tab2组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>`</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        // 创建路由实例对象</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        const router = new VueRouter(&#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            // 所有路由规则</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            routes: [&#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                path: &quot;/&quot;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                redirect: &quot;/user&quot;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            &#125;, &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                path: &quot;/user&quot;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                component: User</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            &#125;, &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                path: &#x27;/register&#x27;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                component: Register,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                // children数组记下子路由规则</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                children: [&#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                    path: &#x27;/register/tab1&#x27;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                    component: tab1</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                &#125;, &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                    path: &#x27;/register/tab2&#x27;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                    component: tab2</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                &#125;]</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            &#125;]</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;);</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        const vm = new Vue(&#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            el: &#x27;#app&#x27;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            data: &#123;&#125;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            // 挂载路由实例对象</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            router: router</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;);</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 被 vue 实例控制的 div 区域 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/user/1&quot;</span>&gt;</span>User1<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/user/2&quot;</span>&gt;</span>User2<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/user/3&quot;</span>&gt;</span>User3<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/register&quot;</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 路由占位符 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 定义两个组件</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> <span class="hljs-title class_">User</span> = &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 获取id</span></span><br><span class="language-javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;User组件---id为&#123;&#123;$route.params.id&#125;&#125;&lt;/h1&gt;&#x27;</span></span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> <span class="hljs-title class_">Register</span> = &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;Register组件&lt;/h1&gt;&#x27;</span></span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        <span class="hljs-comment">// 创建路由实例对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 所有路由规则</span></span><br><span class="language-javascript">            <span class="hljs-attr">routes</span>: [&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 用id代替相似的参数</span></span><br><span class="language-javascript">                <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:id&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span></span><br><span class="language-javascript">            &#125;, &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/register&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">component</span>: <span class="hljs-title class_">Register</span></span><br><span class="language-javascript">            &#125;]</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;&#125;,</span><br><span class="language-javascript">            <span class="hljs-comment">// 挂载路由实例对象</span></span><br><span class="language-javascript">            <span class="hljs-attr">router</span>: router</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>补充：</p><p>如果使用$route.params.id来获取路径传参的数据不够灵活。我们可以通过props来接收参数。</p><ul><li>props为布尔型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">User</span> = &#123; <br>    <span class="hljs-attr">props</span>:[<span class="hljs-string">&quot;id&quot;</span>],<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">&quot;&lt;div&gt;用户：&#123;&#123;id&#125;&#125;&lt;/div&gt;&quot;</span><br>    &#125;<br><br><span class="hljs-keyword">var</span> myRouter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>    <span class="hljs-comment">//routes是路由规则数组</span><br>    <span class="hljs-attr">routes</span>: [<br>        <span class="hljs-comment">//通过/:参数名  的形式传递参数 </span><br>        <span class="hljs-comment">//如果props设置为true，route.params将会被设置为组件属性</span><br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:id&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span>,<span class="hljs-attr">props</span>:<span class="hljs-literal">true</span> &#125;]<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>props为对象类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">User</span> = &#123; <br>    <span class="hljs-attr">props</span>:[<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;pwd&quot;</span>],<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">&quot;&lt;div&gt;用户：&#123;&#123;username&#125;&#125;---&#123;&#123;pwd&#125;&#125;&lt;/div&gt;&quot;</span><br>    &#125;<br><br><span class="hljs-keyword">var</span> myRouter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>    <span class="hljs-comment">//routes是路由规则数组</span><br>    <span class="hljs-attr">routes</span>: [<br>        <span class="hljs-comment">//通过/:参数名  的形式传递参数 </span><br>        <span class="hljs-comment">//如果props设置为对象，则传递的是对象中的数据给组件</span><br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:id&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span>,<span class="hljs-attr">props</span>:&#123;<span class="hljs-attr">username</span>:<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-attr">pwd</span>:<span class="hljs-number">123</span>&#125; &#125;<br>        ]<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>props为函数类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">User</span> = &#123; <br>    <span class="hljs-attr">props</span>:[<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;pwd&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>],<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">&quot;&lt;div&gt;用户：&#123;&#123;id&#125;&#125; -&gt; &#123;&#123;username&#125;&#125;---&#123;&#123;pwd&#125;&#125;&lt;/div&gt;&quot;</span><br>    &#125;<br><br><span class="hljs-keyword">var</span> myRouter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>    <span class="hljs-comment">//routes是路由规则数组</span><br>    <span class="hljs-attr">routes</span>: [<br>        <span class="hljs-comment">//通过/:参数名  的形式传递参数 </span><br>        <span class="hljs-comment">//如果props设置为函数，则通过函数的第一个参数获取路由对象</span><br>        <span class="hljs-comment">//并可以通过路由对象的params属性获取传递的参数</span><br>        <span class="hljs-comment">//</span><br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:id&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span>,<span class="hljs-attr">props</span>:<span class="hljs-function">(<span class="hljs-params">route</span>)=&gt;</span>&#123;<br>            <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">username</span>:<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-attr">pwd</span>:<span class="hljs-number">123</span>,<span class="hljs-attr">id</span>:route.<span class="hljs-property">params</span>.<span class="hljs-property">id</span>&#125;<br>            &#125; <br>        &#125;]<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myRouter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>    <span class="hljs-comment">//routes是路由规则数组</span><br>    <span class="hljs-attr">routes</span>: [<br>        <span class="hljs-comment">//通过name属性为路由添加一个别名</span><br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:id&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span>, <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;user&quot;</span>&#125;<br>    ]<br>&#125;);<br><span class="hljs-comment">//添加了别名之后，可以使用别名进行跳转</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/user&quot;</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name:&#x27;user&#x27; , params: &#123;id:123&#125; &#125;&quot;</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><br><span class="hljs-comment">//还可以编程式导航</span><br>myRouter.<span class="hljs-title function_">push</span>( &#123; <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;user&#x27;</span> , <span class="hljs-attr">params</span>: &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">123</span>&#125; &#125; )<br></code></pre></td></tr></table></figure><h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><p>页面导航的两种方式：</p><ul><li>声明式导航：通过点击链接的方式实现的导航</li><li>编程式导航：调用js的api方法实现导航，例如location.href导航</li></ul><p>Vue-Router中常见的导航方式：</p><ul><li>this.$router.push(“hash地址”);</li><li>this.$router.push(“&#x2F;login”);</li><li>this.$router.push({ name:’user’ , params: {id:123} });</li><li>this.$router.push({ path:”&#x2F;login” });</li><li>this.$router.push({ path:”&#x2F;login”,query:{username:”jack”} });</li><li>this.$router.go( n );&#x2F;&#x2F;n为数字，参考history.go</li><li>this.$router.go( -1 );</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端工具框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>桥接模式和NAT模式的区别</title>
    <link href="/2021/08/27/%E6%A1%A5%E6%8E%A5%E5%92%8CNAT/"/>
    <url>/2021/08/27/%E6%A1%A5%E6%8E%A5%E5%92%8CNAT/</url>
    
    <content type="html"><![CDATA[<h3 id="一、桥接模式（bridged-networking）"><a href="#一、桥接模式（bridged-networking）" class="headerlink" title="一、桥接模式（bridged networking）"></a>一、桥接模式（bridged networking）</h3><p>在桥接模式下，VMWare虚拟出来的操作系统就像是局域网中一台独立的主机，它能够访问网内任何一台机器。</p><p><strong>在桥接模式下，你必须手工为虚拟系统配置IP地址、子网掩码，并且还要和宿主机器处于同一网段，这样虚拟系统才干和宿主机器进行通信。</strong></p><p>配置好网关和DNS的地址后。才能实现通过局域网的网关或路由器访问互联网。</p><p><strong>桥接模式：虚机和物理主机可通信，可与外网通信。</strong></p><h3 id="二、NAT模式-network-address-translation"><a href="#二、NAT模式-network-address-translation" class="headerlink" title="二、NAT模式(network address translation)"></a>二、NAT模式(network address translation)</h3><p>这种模式就是让虚拟系统借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网。</p><p><strong>也就是说，使用NAT模式能够实现在虚拟的系统里面直接访问互联网。NAT模式下的虚拟系统的TCP&#x2F;IP配置信息是由VMnet8(NAT)虚拟网络的DHCPserver提供的，无法进行手工改动，因此虚拟系统也就无法和本局域网中的其它真实主机进行通讯。採用NAT模式最大的优势是虚拟系统接入互联网很easy。仅仅需要宿主机器能访问互联网，不需配置IP地址，子网掩码，网关。可是DNS地址还是要依据实际情况配的。</strong></p><p>加入DNS地址除了在网卡属性中填写。还能够在虚拟机中的“虚拟网络编辑器”中的NAT选项卡中点击“编辑”button中来加入。</p><p>如今是主机和虚拟机互通，假设你的adsl带路由功能。那关闭虚拟机的dhcp，选桥接，检查2机是否分配同网段的IP，关闭防火墙。</p><p>NAT模式：虚机可和外网通信</p><h3 id="三、仅主机模式："><a href="#三、仅主机模式：" class="headerlink" title="三、仅主机模式："></a>三、仅主机模式：</h3><p>仅让虚拟机的系统之间与物理主机通信，不能访问外网，在真机中对应的物理网卡是VMnet1。</p><p>如果只是要让虚拟机能上网，这桥接模式和nat模式都可以使用。用桥接的话只要你在局域网内有合法的地址，比方你的ADSL猫是带路由功能的，假设是在单位。那就要网管给你合法IP才行（如今公司都是mac和ip绑定的）。</p><p>原文链接：<a href="https://blog.csdn.net/qq_34536480/article/details/114266461">https://blog.csdn.net/qq_34536480/article/details/114266461</a></p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git和GitHub从入门到放弃</title>
    <link href="/2021/07/06/git-github/"/>
    <url>/2021/07/06/git-github/</url>
    
    <content type="html"><![CDATA[<h1 id="Git的安装及配置"><a href="#Git的安装及配置" class="headerlink" title="Git的安装及配置"></a>Git的安装及配置</h1><p>Git是一个版本控制管理工具，在项目管理方面有着极其重要的作用。下面是Git的安装步骤：</p><h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><p>Git官网：<a href="https://git-scm.com/">https://git-scm.com/</a></p><p>在官网下载相应软件后，进行双击安装，一路next即可。</p><p>安装完成后，在任意文件夹下右击，可看到其两个标志，其中<code>Git Bash Here</code>是我们常用的选项：</p><p><img src="/img/git-github/tYo9OH8MID1Wgu2.jpg"></p><p>点击可进入Git命令行，输入<code>git --version</code>后回车，出现版本信息即安装成功！</p><h2 id="Git使用前配置"><a href="#Git使用前配置" class="headerlink" title="Git使用前配置"></a>Git使用前配置</h2><p>使用Git前，你需要告诉Git你是谁，有如下配置：</p><p>配置提交人名称：<code>git config --global user.name 你的名称</code></p><p>配置提交人邮箱：<code>git config --global user.email 你的邮箱</code></p><p>查看git配置信息：<code>git config --list</code></p><p><img src="/img/git-github/QQ%E6%88%AA%E5%9B%BE20221127114522.png"></p><p><strong>注意：你的名称和邮箱应该尽量与你的GitHub名称及邮箱保持一致，如果需要修改，重复以上代码即可。</strong></p><h1 id="Git的使用"><a href="#Git的使用" class="headerlink" title="Git的使用"></a>Git的使用</h1><h2 id="提交步骤"><a href="#提交步骤" class="headerlink" title="提交步骤"></a>提交步骤</h2><ol><li><code>git init</code> 初始化git仓库，执行后文件夹中会有一个.git文件夹，如果没有，则选择显示隐藏文件</li><li><code>git status</code> 查看文件状态</li><li><code>git add</code> 文件列表 追踪文件，添加到暂存区</li><li><code>git commit -m</code> 提交信息 向仓库提交代码，并标上相应的信息</li><li><code>git log</code> 查看提交记录</li></ol><h2 id="撤销方法"><a href="#撤销方法" class="headerlink" title="撤销方法"></a>撤销方法</h2><ol><li><code>git checkout</code> 文件 用暂存区的文件覆盖工作目录中的文件；</li><li><code>git rm --cashed</code> 文件 将文件从暂存区中删除；</li><li><code>git reset --hard commitID</code> 恢复到指定的提交记录并覆盖暂存区和工作目录，之后的提交记录也会消失；commitID使用git log获取；</li></ol><h2 id="分支的使用"><a href="#分支的使用" class="headerlink" title="分支的使用"></a>分支的使用</h2><p> 分支可以理解为当前工作目录的一个副本，使用分支可以使开发从主线上分离出来，避免影响主线开发。</p><h3 id="分支细分"><a href="#分支细分" class="headerlink" title="分支细分"></a>分支细分</h3><ul><li><strong>主分支（master）</strong>: 第一次向git仓库中提交更新记录时自动产生的一个主线分支。</li><li><strong>开发分支（develop）</strong>：作为开发的分支，基于master分支而创建。</li><li><strong>功能分支（feature）</strong>：作为开发具体功能的分支，基于开发分支创建。</li></ul><h3 id="分支命令"><a href="#分支命令" class="headerlink" title="分支命令"></a>分支命令</h3><ul><li><code>git branch</code> 查看分支</li><li><code>git branch</code> 分支名称 创建分支</li><li><code>git checkout</code> 分支名称 切换到该分支</li><li><code>git merge</code> 来源分支 合并分支</li><li><code>git branch -d</code> 分支名称 删除分支（分支合并后才可以被删除）（-d改为-D强制删除）</li></ul><h3 id="暂时保存更改"><a href="#暂时保存更改" class="headerlink" title="暂时保存更改"></a>暂时保存更改</h3><p> 在git中，可以暂时提取分支上所有的改动并存储，让开发人员得到个干净的工作副本，临时转向其他工作，相当于一个剪贴板的作用。</p><p>使用场景：当当前分支未开发完成，放到暂存区但未提交到库，这时需要做其他任务，如果直接过去，那么暂存区的内容也将被携带过去。这时，就需要以下命令将暂存区内容暂时存储到类似剪贴板的地方，并清空暂存区，之后再恢复。</p><p>存储临时改动：<code>git stash</code><br>恢复改动：<code>git stash pop</code> (恢复前要在正确的分支上恢复，否则会恢复到其他分支上)</p><h1 id="GitHub的使用"><a href="#GitHub的使用" class="headerlink" title="GitHub的使用"></a>GitHub的使用</h1><p> 在版本控制系统中，大约90%的操作都是在本地库中进行的：暂存，提交，查看状态或者历史记录等等，除此之外，如果仅仅只有你一个人在这个项目里工作，那么本地仓库就足够了。<br> 当你要和你的开发団队共享数据时，设置一个远程仓库才有意义。你可以把它想象成一个“文件管理服务器”，利用这个服务器可以与开发团队的其他成员进行数据交换。</p><h2 id="GitHub注册"><a href="#GitHub注册" class="headerlink" title="GitHub注册"></a>GitHub注册</h2><p>前往<a href="https://github.com/">GitHub</a>主页，点击Sign up进行注册账号。填写相应的用户名、邮箱、密码等相应信息即可。</p><p><img src="/img/git-github/t7dIHBzqpLA2gVD.png"></p><h2 id="多人协作流程"><a href="#多人协作流程" class="headerlink" title="多人协作流程"></a>多人协作流程</h2><ol><li>A在自己的计算机中创建本地仓库；</li><li>A在 github中创建远程仓库；</li><li>A将本地仓库推送到远程仓库；</li><li>B克隆远程仓库到本地进行开发；</li><li>B将本地仓库中开发的内容推送到远程合库；</li><li>A将远程仓库中的最新内容拉去到本地。</li></ol><h2 id="仓库初建时"><a href="#仓库初建时" class="headerlink" title="仓库初建时"></a>仓库初建时</h2><p><img src="/img/git-github/sWMYmEFz75dToaC.jpg"></p><h2 id="仓库建成后"><a href="#仓库建成后" class="headerlink" title="仓库建成后"></a>仓库建成后</h2><p><img src="/img/git-github/X7GMWnAuim3ayRO.jpg"></p><h2 id="将本地仓库推送到远程仓库"><a href="#将本地仓库推送到远程仓库" class="headerlink" title="将本地仓库推送到远程仓库"></a>将本地仓库推送到远程仓库</h2><p>在GitHub上创建一个仓库，找到其仓库地址：</p><p><img src="/img/git-github/KNg4PubIpEximlZ.png"></p><h2 id="推送到远程仓库的命令"><a href="#推送到远程仓库的命令" class="headerlink" title="推送到远程仓库的命令"></a>推送到远程仓库的命令</h2><ol><li><code>git push 远程仓库地址 分支名称</code></li><li><code>git remote add 远程仓库别名 远程仓库地址</code> （给远程仓库起一个别名，一般设置origin）</li><li><code>git push 远程仓库别名 分支名称</code></li><li><code>git push -u 远程仓库别名 分支名称</code> （-u表示记录推送地址及分支，下次推送只需要输入git push即可）</li></ol><h2 id="从本地向远程仓库提交的基本步骤"><a href="#从本地向远程仓库提交的基本步骤" class="headerlink" title="从本地向远程仓库提交的基本步骤"></a>从本地向远程仓库提交的基本步骤</h2><ol><li><code>git add</code> 文件列表 追踪文件，添加到本地暂存区；</li><li><code>git commit -m</code> 提交信息 向本地仓库提交代码，并标上相应的信息；</li><li><code>git push</code> 远程仓库别名 分支名称提交到远程仓库。（别名需要事先声明）</li></ol><h2 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h2><ul><li>克隆远程仓库：<code>git clone</code> 仓库地址 （另外，其地址别名也会被克隆过来）</li></ul><h2 id="克隆者向远程仓库提交代码"><a href="#克隆者向远程仓库提交代码" class="headerlink" title="克隆者向远程仓库提交代码"></a>克隆者向远程仓库提交代码</h2><p> 克隆不需要权限，但是如果克隆后对代码进行贡献，且想要推送到原远程仓库就需要被授予一定的权限。具体步骤如下：</p><p><strong>原远程仓库创建者在GitHub上邀请团队成员：</strong></p><p><img src="/img/git-github/3R7OTHHVI0HNAB6JXU.png"></p><p><strong>获取邀请链接并发送给该成员：</strong></p><p><img src="/img/git-github/jUhPYX6io3lM8z1.jpg"></p><p><strong>被邀请成员登录GitHub，并将收到的邀请链接复制到浏览器地址栏进入，进行确认即可。</strong></p><h2 id="拉取远程仓库的最新版本"><a href="#拉取远程仓库的最新版本" class="headerlink" title="拉取远程仓库的最新版本"></a>拉取远程仓库的最新版本</h2><p> 当远程仓库版本高于本地仓库版本时，是无法提交到远程库的，需要先pull拉取最新版本后再进行提交。</p><ul><li>拉取远程仓库最新版本：<code>git pull 远程仓库地址 分支名称</code> （同样可使用别名）</li></ul><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><ul><li>在多人同时开发一个项目时，如果两个人修改了同一个文件的同一个地方，就会发生冲突。冲突需要人为解决。</li><li>推送前pull拉取远程库最新版本，查看冲突，进行修改并删除无用的地方再提交即可。</li></ul><p><img src="/img/git-github/RnxhNFT6MpgbBld.jpg"></p><h2 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h2><ul><li>某团队外成员C将该项目fork（相当于复制一份到自己的仓库）到自己的GitHub中；</li><li>C将自己fork到的远程仓库克隆到本地仓库中进行修改；</li><li>对本地修改正常推送到自己GitHub上fork到的远程库；</li><li>点击<code>Pull requests</code> -&gt; <code>New pull requests</code> -&gt; <code>Create pull request</code> ,添加相应描述即可创建。</li><li>团队内外成员可在<code>Write区</code>进行对话</li><li>团队成员核查完发现代码没有问题，就可以进行合并（Merge pull request）了。</li></ul><h2 id="SSH免登录"><a href="#SSH免登录" class="headerlink" title="SSH免登录"></a>SSH免登录</h2><p> 使用http地址进行推送时，每次都需要输入github用户名和密码（win10可以记录密码，因此不需要多次），而使用SSH（公钥与私钥结合）则可以免登录验证。步骤如下：</p><ul><li>生成私钥：<code>ssh-keygen</code></li><li>私钥默认存储目录：<code>C:\Users\用户\\.ssh</code></li><li>公钥名称：<code>id_rsa.pub</code></li><li>私钥名称：<code>id_rsa</code></li><li>用户将公钥串进行复制，再到GitHub上，<code>Settings</code> -&gt; <code>SSH and GPG keys</code> , 将公钥粘贴到Key位置进行添加即可。</li><li>然后再进行项目提交等操作，只需要复制SSH地址，取别名等方式与http方式相同。</li></ul><h2 id="git忽略清单"><a href="#git忽略清单" class="headerlink" title="git忽略清单"></a>git忽略清单</h2><p> 将不需要被git管理的文件名字添加到此文件中，在执行git命令的时候，git就会忽略这些文件.</p><ul><li>git忽略清单固定名称：<code>.gitignore</code></li><li>在该文件中，写上需要忽略的文件即可。</li></ul><h2 id="GitHub项目介绍"><a href="#GitHub项目介绍" class="headerlink" title="GitHub项目介绍"></a>GitHub项目介绍</h2><p>创建<code>readme.md</code>文件，在文件中写入相应的项目介绍，在github中即可看到其介绍。</p><h2 id="常用命令手册下载"><a href="#常用命令手册下载" class="headerlink" title="常用命令手册下载"></a>常用命令手册下载</h2><p><a href="https://liaoxuefeng.gitee.io/resource.liaoxuefeng.com/git/git-cheat-sheet.pdf">点击这里</a>下载常用命令手册 <code>Git Cheat Sheet</code></p>]]></content>
    
    
    <categories>
      
      <category>后端工具框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络知识（持续更新）</title>
    <link href="/2021/07/06/internret/"/>
    <url>/2021/07/06/internret/</url>
    
    <content type="html"><![CDATA[<h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><p><img src="/img/net/20221202213716.png"></p><p><strong>通过“序号”和“ACK号” 可以确认接收方是否收到了网络包。</strong></p><p>TCP 采用这样的方式确认对方是否收到了数据，在得到对方确认之前，发送过的包都会保存在发送缓冲区中。如果对方没有返回某些包对应的 ACK 号，那么就重新发送这些包。</p><p>这一机制非常强大。通过这一机制，我们可以确认接收方有没有收到某个包，如果没有收到则重新发送，这样一来，无论网络中发生任T何错误，我们都可以发现并采取补救措施（重传网络包)。 反过来说，有了这一机制，我们就不需要在其他地方对错误进行补救了。</p><p>因此，网卡、集线器、路由器都没有错误补偿机制，一旦检测到错误就直接丢弃相应的包。应用程序也是一样，因为采用TCP 传输，即便发生一些错误对方最终也能够收到正确的数据，所以应用程序只管自顾自地发送这些数据就好了。不过，如果发生网络中断、服务器宕机等问题，那么无论 TCP 怎样重传都不管用。这种情况下，无论如何尝试都是徒劳，因此 TCP 会在尝试几次重传无效之后强制结束通信，并向应用程序报错。</p><p><strong>等待ACK的时间实在太浪费了。为了减少这样的浪费，TCP 采用滑动窗口方式来管理数据发送和 ACK 号的操作。</strong></p><p>所谓滑动窗口，就是在发送一个包之后，不等待 ACK 号返回，而是直接发送后续的一系列包。这样一来，等待 ACK 号的这段时间就被有效利用起来了。</p><p>虽然这样做能够减少等待 ACK 号时的时间浪费，但有一些问题需要注意。在一来一回方式中，接收方完成接收操作后返回 ACK 号，然后发送方收到ACK 号之后才继续发送下一个包，因此不会出现发送的包太多接收方处理不过来的情況。但如果不等返回 ACK 号就连续发送包，就有可能会出现发兴向的频率超过接收方处理能力的情况。</p><p><strong>所以调整TCP窗口大小是TCP调优重要参数之一，一般和缓冲区大小一致</strong></p><h1 id="路由器-amp-集线器"><a href="#路由器-amp-集线器" class="headerlink" title="路由器&amp;集线器"></a>路由器&amp;集线器</h1><p>路由器：根据目标地址判断下一个路由</p><p>集线器：在子网中将网络包传输到下一个路由</p><p>握手 ip头 路由表 OSPF协议</p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
